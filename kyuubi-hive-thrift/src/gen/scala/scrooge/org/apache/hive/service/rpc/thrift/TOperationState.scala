/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

import com.twitter.scrooge.ThriftEnum
import scala.collection.immutable.{Map => immutable$Map}


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object TOperationState extends _root_.com.twitter.scrooge.ThriftEnumObject[TOperationState] {

  val annotations: immutable$Map[String, String] = immutable$Map.empty

  
  case object InitializedState extends org.apache.hive.service.rpc.thrift.TOperationState {
    val value: Int = 0
    val name: String = "InitializedState"
    val originalName: String = "INITIALIZED_STATE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeInitializedState = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationState.InitializedState)
  
  case object RunningState extends org.apache.hive.service.rpc.thrift.TOperationState {
    val value: Int = 1
    val name: String = "RunningState"
    val originalName: String = "RUNNING_STATE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeRunningState = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationState.RunningState)
  
  case object FinishedState extends org.apache.hive.service.rpc.thrift.TOperationState {
    val value: Int = 2
    val name: String = "FinishedState"
    val originalName: String = "FINISHED_STATE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeFinishedState = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationState.FinishedState)
  
  case object CanceledState extends org.apache.hive.service.rpc.thrift.TOperationState {
    val value: Int = 3
    val name: String = "CanceledState"
    val originalName: String = "CANCELED_STATE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeCanceledState = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationState.CanceledState)
  
  case object ClosedState extends org.apache.hive.service.rpc.thrift.TOperationState {
    val value: Int = 4
    val name: String = "ClosedState"
    val originalName: String = "CLOSED_STATE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeClosedState = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationState.ClosedState)
  
  case object ErrorState extends org.apache.hive.service.rpc.thrift.TOperationState {
    val value: Int = 5
    val name: String = "ErrorState"
    val originalName: String = "ERROR_STATE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeErrorState = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationState.ErrorState)
  
  case object UknownState extends org.apache.hive.service.rpc.thrift.TOperationState {
    val value: Int = 6
    val name: String = "UknownState"
    val originalName: String = "UKNOWN_STATE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeUknownState = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationState.UknownState)
  
  case object PendingState extends org.apache.hive.service.rpc.thrift.TOperationState {
    val value: Int = 7
    val name: String = "PendingState"
    val originalName: String = "PENDING_STATE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomePendingState = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationState.PendingState)
  
  case object TimedoutState extends org.apache.hive.service.rpc.thrift.TOperationState {
    val value: Int = 8
    val name: String = "TimedoutState"
    val originalName: String = "TIMEDOUT_STATE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeTimedoutState = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationState.TimedoutState)

  case class EnumUnknownTOperationState(value: Int)
    extends org.apache.hive.service.rpc.thrift.TOperationState with _root_.com.twitter.scrooge.EnumItemUnknown
  {
    val name: String = "EnumUnknownTOperationState" + value
    def originalName: String = name
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   */
  def apply(value: Int): org.apache.hive.service.rpc.thrift.TOperationState =
    value match {
      case 0 => org.apache.hive.service.rpc.thrift.TOperationState.InitializedState
      case 1 => org.apache.hive.service.rpc.thrift.TOperationState.RunningState
      case 2 => org.apache.hive.service.rpc.thrift.TOperationState.FinishedState
      case 3 => org.apache.hive.service.rpc.thrift.TOperationState.CanceledState
      case 4 => org.apache.hive.service.rpc.thrift.TOperationState.ClosedState
      case 5 => org.apache.hive.service.rpc.thrift.TOperationState.ErrorState
      case 6 => org.apache.hive.service.rpc.thrift.TOperationState.UknownState
      case 7 => org.apache.hive.service.rpc.thrift.TOperationState.PendingState
      case 8 => org.apache.hive.service.rpc.thrift.TOperationState.TimedoutState
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownTOperationState(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): org.apache.hive.service.rpc.thrift.TOperationState =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownTOperationState(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState] =
    value match {
      case 0 => _SomeInitializedState
      case 1 => _SomeRunningState
      case 2 => _SomeFinishedState
      case 3 => _SomeCanceledState
      case 4 => _SomeClosedState
      case 5 => _SomeErrorState
      case 6 => _SomeUknownState
      case 7 => _SomePendingState
      case 8 => _SomeTimedoutState
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState] =
    name.toLowerCase match {
      case "initializedstate" => _SomeInitializedState
      case "runningstate" => _SomeRunningState
      case "finishedstate" => _SomeFinishedState
      case "canceledstate" => _SomeCanceledState
      case "closedstate" => _SomeClosedState
      case "errorstate" => _SomeErrorState
      case "uknownstate" => _SomeUknownState
      case "pendingstate" => _SomePendingState
      case "timedoutstate" => _SomeTimedoutState
      case _ => _root_.scala.None
    }

  lazy val list: List[org.apache.hive.service.rpc.thrift.TOperationState] = scala.List[org.apache.hive.service.rpc.thrift.TOperationState](
    org.apache.hive.service.rpc.thrift.TOperationState.InitializedState,
    org.apache.hive.service.rpc.thrift.TOperationState.RunningState,
    org.apache.hive.service.rpc.thrift.TOperationState.FinishedState,
    org.apache.hive.service.rpc.thrift.TOperationState.CanceledState,
    org.apache.hive.service.rpc.thrift.TOperationState.ClosedState,
    org.apache.hive.service.rpc.thrift.TOperationState.ErrorState,
    org.apache.hive.service.rpc.thrift.TOperationState.UknownState,
    org.apache.hive.service.rpc.thrift.TOperationState.PendingState,
    org.apache.hive.service.rpc.thrift.TOperationState.TimedoutState
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait TOperationState extends ThriftEnum with Serializable