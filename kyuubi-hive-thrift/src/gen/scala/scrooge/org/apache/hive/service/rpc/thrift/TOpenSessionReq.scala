/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  InvalidFieldsException,
  LazyTProtocol,
  StructBuilder,
  StructBuilderFactory,
  TFieldBlob,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructField,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.reflect.{ClassTag, classTag}


object TOpenSessionReq extends ValidatingThriftStructCodec3[TOpenSessionReq] with StructBuilderFactory[TOpenSessionReq] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TOpenSessionReq")
  val ClientProtocolField: TField = new TField("client_protocol", TType.ENUM, 1)
  val ClientProtocolFieldI32: TField = new TField("client_protocol", TType.I32, 1)
  val ClientProtocolFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TProtocolVersion] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TProtocolVersion]]
  val UsernameField: TField = new TField("username", TType.STRING, 2)
  val UsernameFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val PasswordField: TField = new TField("password", TType.STRING, 3)
  val PasswordFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val ConfigurationField: TField = new TField("configuration", TType.MAP, 4)
  val ConfigurationFieldManifest: Manifest[_root_.scala.collection.Map[String, String]] = implicitly[Manifest[_root_.scala.collection.Map[String, String]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      ClientProtocolField,
      false,
      true,
      ClientProtocolFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[org.apache.hive.service.rpc.thrift.TProtocolVersion](TProtocolVersion.HiveCliServiceProtocolV10)
    ),
    new ThriftStructFieldInfo(
      UsernameField,
      true,
      false,
      UsernameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      PasswordField,
      true,
      false,
      PasswordFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ConfigurationField,
      true,
      false,
      ConfigurationFieldManifest,
      _root_.scala.Some(implicitly[Manifest[String]]),
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
    classTag[org.apache.hive.service.rpc.thrift.TProtocolVersion].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[_root_.scala.collection.Map[String, String]]].asInstanceOf[ClassTag[_]]
  )

  private[this] val structFields: Seq[ThriftStructField[TOpenSessionReq]] = {
    Seq(
      new ThriftStructField[TOpenSessionReq](
        ClientProtocolField,
        _root_.scala.Some(ClientProtocolFieldManifest),
        classOf[TOpenSessionReq]) {
          def getValue[R](struct: TOpenSessionReq): R = struct.clientProtocol.asInstanceOf[R]
      },
      new ThriftStructField[TOpenSessionReq](
        UsernameField,
        _root_.scala.Some(UsernameFieldManifest),
        classOf[TOpenSessionReq]) {
          def getValue[R](struct: TOpenSessionReq): R = struct.username.asInstanceOf[R]
      },
      new ThriftStructField[TOpenSessionReq](
        PasswordField,
        _root_.scala.Some(PasswordFieldManifest),
        classOf[TOpenSessionReq]) {
          def getValue[R](struct: TOpenSessionReq): R = struct.password.asInstanceOf[R]
      },
      new ThriftStructField[TOpenSessionReq](
        ConfigurationField,
        _root_.scala.Some(ConfigurationFieldManifest),
        classOf[TOpenSessionReq]) {
          def getValue[R](struct: TOpenSessionReq): R = struct.configuration.asInstanceOf[R]
      }
    )
  }

  override lazy val metaData: ThriftStructMetaData[TOpenSessionReq] =
    new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TOpenSessionReq): Unit = {
    if (_item.clientProtocol == null) throw new TProtocolException("Required field clientProtocol cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TOpenSessionReq): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.clientProtocol == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.clientProtocol)
    buf ++= validateField(item.username)
    buf ++= validateField(item.password)
    buf ++= validateField(item.configuration)
    buf.toList
  }

  def withoutPassthroughFields(original: TOpenSessionReq): TOpenSessionReq =
    new Immutable(
      clientProtocol =
        {
          val field = original.clientProtocol
          field
        },
      username =
        {
          val field = original.username
          field.map { field =>
            field
          }
        },
      password =
        {
          val field = original.password
          field.map { field =>
            field
          }
        },
      configuration =
        {
          val field = original.configuration
          field.map { field =>
            field.map { case (key, value) =>
                val newKey = {
                val field = key
                field
              }
  
  
                val newValue = {
                val field = value
                field
              }
  
  
              newKey -> newValue
            }
          }
        }
    )

  def newBuilder(): StructBuilder[TOpenSessionReq] = new TOpenSessionReqStructBuilder(_root_.scala.None, fieldTypes)

  override def encode(_item: TOpenSessionReq, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TOpenSessionReq = {

    var clientProtocol: org.apache.hive.service.rpc.thrift.TProtocolVersion = TProtocolVersion.HiveCliServiceProtocolV10
    var _got_clientProtocol = false
    var usernameOffset: Int = -1
    var passwordOffset: Int = -1
    var configuration: Option[_root_.scala.collection.Map[String, String]] = None

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
    
                clientProtocol = readClientProtocolValue(_iprot)
                _got_clientProtocol = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'clientProtocol' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                usernameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'username' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                passwordOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'password' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.MAP =>
    
                configuration = Some(readConfigurationValue(_iprot))
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'configuration' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_clientProtocol) throw new TProtocolException("Required field 'clientProtocol' was not found in serialized data for struct TOpenSessionReq")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      clientProtocol,
      usernameOffset,
      passwordOffset,
      configuration,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TOpenSessionReq =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TOpenSessionReq = {
    var clientProtocol: org.apache.hive.service.rpc.thrift.TProtocolVersion = TProtocolVersion.HiveCliServiceProtocolV10
    var _got_clientProtocol = false
    var username: _root_.scala.Option[String] = _root_.scala.None
    var password: _root_.scala.Option[String] = _root_.scala.None
    var configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                clientProtocol = readClientProtocolValue(_iprot)
                _got_clientProtocol = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'clientProtocol' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                username = _root_.scala.Some(readUsernameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'username' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                password = _root_.scala.Some(readPasswordValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'password' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.MAP =>
                configuration = _root_.scala.Some(readConfigurationValue(_iprot))
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'configuration' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_clientProtocol) throw new TProtocolException("Required field 'clientProtocol' was not found in serialized data for struct TOpenSessionReq")
    new Immutable(
      clientProtocol,
      username,
      password,
      configuration,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    clientProtocol: org.apache.hive.service.rpc.thrift.TProtocolVersion = TProtocolVersion.HiveCliServiceProtocolV10,
    username: _root_.scala.Option[String] = _root_.scala.None,
    password: _root_.scala.Option[String] = _root_.scala.None,
    configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = _root_.scala.None
  ): TOpenSessionReq =
    new Immutable(
      clientProtocol,
      username,
      password,
      configuration
    )

  def unapply(_item: TOpenSessionReq): _root_.scala.Option[_root_.scala.Tuple4[org.apache.hive.service.rpc.thrift.TProtocolVersion, Option[String], Option[String], Option[_root_.scala.collection.Map[String, String]]]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readClientProtocolValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TProtocolVersion = {
    org.apache.hive.service.rpc.thrift.TProtocolVersion.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeClientProtocolField(clientProtocol_item: org.apache.hive.service.rpc.thrift.TProtocolVersion, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ClientProtocolFieldI32)
    writeClientProtocolValue(clientProtocol_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeClientProtocolValue(clientProtocol_item: org.apache.hive.service.rpc.thrift.TProtocolVersion, _oprot: TProtocol): Unit = {
    _oprot.writeI32(clientProtocol_item.value)
  }

  @inline private[thrift] def readUsernameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeUsernameField(username_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UsernameField)
    writeUsernameValue(username_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUsernameValue(username_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(username_item)
  }

  @inline private[thrift] def readPasswordValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writePasswordField(password_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PasswordField)
    writePasswordValue(password_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePasswordValue(password_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(password_item)
  }

  @inline private[thrift] def readConfigurationValue(_iprot: TProtocol): _root_.scala.collection.Map[String, String] = {
    val _map = _iprot.readMapBegin()
    if (_map.size == 0) {
      _iprot.readMapEnd()
      Map.empty[String, String]
    } else {
      val _rv = new _root_.scala.collection.mutable.HashMap[String, String]
      var _i = 0
      while (_i < _map.size) {
        val _key = {
          _iprot.readString()
        }
        val _value = {
          _iprot.readString()
        }
        _rv(_key) = _value
        _i += 1
      }
      _iprot.readMapEnd()
      _rv
    }
  }

  @inline private def writeConfigurationField(configuration_item: _root_.scala.collection.Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ConfigurationField)
    writeConfigurationValue(configuration_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeConfigurationValue(configuration_item: _root_.scala.collection.Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, configuration_item.size))
    configuration_item.foreach { case (configuration_item_key, configuration_item_value) =>
      _oprot.writeString(configuration_item_key)
      _oprot.writeString(configuration_item_value)
    }
    _oprot.writeMapEnd()
  }


  object Immutable extends ThriftStructCodec3[TOpenSessionReq] {
    override def encode(_item: TOpenSessionReq, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TOpenSessionReq = TOpenSessionReq.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TOpenSessionReq] = TOpenSessionReq.metaData
  }

  /**
   * The default read-only implementation of TOpenSessionReq.  You typically should not need to
   * directly reference this class; instead, use the TOpenSessionReq.apply method to construct
   * new instances.
   */
  class Immutable(
      val clientProtocol: org.apache.hive.service.rpc.thrift.TProtocolVersion,
      val username: _root_.scala.Option[String],
      val password: _root_.scala.Option[String],
      val configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TOpenSessionReq {
    def this(
      clientProtocol: org.apache.hive.service.rpc.thrift.TProtocolVersion = TProtocolVersion.HiveCliServiceProtocolV10,
      username: _root_.scala.Option[String] = _root_.scala.None,
      password: _root_.scala.Option[String] = _root_.scala.None,
      configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = _root_.scala.None
    ) = this(
      clientProtocol,
      username,
      password,
      configuration,
      immutable$Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val clientProtocol: org.apache.hive.service.rpc.thrift.TProtocolVersion,
      usernameOffset: Int,
      passwordOffset: Int,
      val configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TOpenSessionReq {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val username: _root_.scala.Option[String] =
      if (usernameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, usernameOffset))
      }
    lazy val password: _root_.scala.Option[String] =
      if (passwordOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, passwordOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TOpenSessionReq trait with additional state or
   * behavior and implement the read-only methods from TOpenSessionReq using an underlying
   * instance.
   */
  trait Proxy extends TOpenSessionReq {
    protected def _underlying_TOpenSessionReq: TOpenSessionReq
    override def clientProtocol: org.apache.hive.service.rpc.thrift.TProtocolVersion = _underlying_TOpenSessionReq.clientProtocol
    override def username: _root_.scala.Option[String] = _underlying_TOpenSessionReq.username
    override def password: _root_.scala.Option[String] = _underlying_TOpenSessionReq.password
    override def configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = _underlying_TOpenSessionReq.configuration
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TOpenSessionReq._passthroughFields
  }
}

/**
 * Prefer the companion object's [[org.apache.hive.service.rpc.thrift.TOpenSessionReq.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TOpenSessionReq
  extends ThriftStruct
  with _root_.scala.Product4[org.apache.hive.service.rpc.thrift.TProtocolVersion, Option[String], Option[String], Option[_root_.scala.collection.Map[String, String]]]
  with ValidatingThriftStruct[TOpenSessionReq]
  with java.io.Serializable
{
  import TOpenSessionReq._

  def clientProtocol: org.apache.hive.service.rpc.thrift.TProtocolVersion
  def username: _root_.scala.Option[String]
  def password: _root_.scala.Option[String]
  def configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: org.apache.hive.service.rpc.thrift.TProtocolVersion = clientProtocol
  def _2: _root_.scala.Option[String] = username
  def _3: _root_.scala.Option[String] = password
  def _4: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = configuration

  def toTuple: _root_.scala.Tuple4[org.apache.hive.service.rpc.thrift.TProtocolVersion, Option[String], Option[String], Option[_root_.scala.collection.Map[String, String]]] = {
    (
      clientProtocol,
      username,
      password,
      configuration
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (clientProtocol ne null) {
                writeClientProtocolValue(clientProtocol, _oprot)
                _root_.scala.Some(TOpenSessionReq.ClientProtocolField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (username.isDefined) {
                writeUsernameValue(username.get, _oprot)
                _root_.scala.Some(TOpenSessionReq.UsernameField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (password.isDefined) {
                writePasswordValue(password.get, _oprot)
                _root_.scala.Some(TOpenSessionReq.PasswordField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (configuration.isDefined) {
                writeConfigurationValue(configuration.get, _oprot)
                _root_.scala.Some(TOpenSessionReq.ConfigurationField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TOpenSessionReq = {
    var clientProtocol: org.apache.hive.service.rpc.thrift.TProtocolVersion = this.clientProtocol
    var username: _root_.scala.Option[String] = this.username
    var password: _root_.scala.Option[String] = this.password
    var configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = this.configuration
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        clientProtocol = readClientProtocolValue(_blob.read)
      case 2 =>
        username = _root_.scala.Some(readUsernameValue(_blob.read))
      case 3 =>
        password = _root_.scala.Some(readPasswordValue(_blob.read))
      case 4 =>
        configuration = _root_.scala.Some(readConfigurationValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      clientProtocol,
      username,
      password,
      configuration,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TOpenSessionReq = {
    var clientProtocol: org.apache.hive.service.rpc.thrift.TProtocolVersion = this.clientProtocol
    var username: _root_.scala.Option[String] = this.username
    var password: _root_.scala.Option[String] = this.password
    var configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = this.configuration

    _fieldId match {
      case 1 =>
        clientProtocol = TProtocolVersion.HiveCliServiceProtocolV10
      case 2 =>
        username = _root_.scala.None
      case 3 =>
        password = _root_.scala.None
      case 4 =>
        configuration = _root_.scala.None
      case _ =>
    }
    new Immutable(
      clientProtocol,
      username,
      password,
      configuration,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetClientProtocol: TOpenSessionReq = unsetField(1)

  def unsetUsername: TOpenSessionReq = unsetField(2)

  def unsetPassword: TOpenSessionReq = unsetField(3)

  def unsetConfiguration: TOpenSessionReq = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    TOpenSessionReq.validate(this)
    _oprot.writeStructBegin(Struct)
    if (clientProtocol ne null) writeClientProtocolField(clientProtocol, _oprot)
    if (username.isDefined) writeUsernameField(username.get, _oprot)
    if (password.isDefined) writePasswordField(password.get, _oprot)
    if (configuration.isDefined) writeConfigurationField(configuration.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    clientProtocol: org.apache.hive.service.rpc.thrift.TProtocolVersion = this.clientProtocol,
    username: _root_.scala.Option[String] = this.username,
    password: _root_.scala.Option[String] = this.password,
    configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = this.configuration,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TOpenSessionReq =
    new Immutable(
      clientProtocol,
      username,
      password,
      configuration,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TOpenSessionReq]

  private def _equals(x: TOpenSessionReq, y: TOpenSessionReq): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TOpenSessionReq])

  override def hashCode: Int = {
    _root_.scala.runtime.ScalaRunTime._hashCode(this)
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.clientProtocol
    case 1 => this.username
    case 2 => this.password
    case 3 => this.configuration
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TOpenSessionReq"

  def _codec: ValidatingThriftStructCodec3[TOpenSessionReq] = TOpenSessionReq

  def newBuilder(): StructBuilder[TOpenSessionReq] = new TOpenSessionReqStructBuilder(_root_.scala.Some(this), fieldTypes)
}

private[thrift] class TOpenSessionReqStructBuilder(instance: _root_.scala.Option[TOpenSessionReq], fieldTypes: IndexedSeq[ClassTag[_]])
    extends StructBuilder[TOpenSessionReq](fieldTypes) {

  def build(): TOpenSessionReq = instance match {
    case _root_.scala.Some(i) =>
      TOpenSessionReq(
        (if (fieldArray(0) == null) i.clientProtocol else fieldArray(0)).asInstanceOf[org.apache.hive.service.rpc.thrift.TProtocolVersion],
        (if (fieldArray(1) == null) i.username else fieldArray(1)).asInstanceOf[_root_.scala.Option[String]],
        (if (fieldArray(2) == null) i.password else fieldArray(2)).asInstanceOf[_root_.scala.Option[String]],
        (if (fieldArray(3) == null) i.configuration else fieldArray(3)).asInstanceOf[_root_.scala.Option[_root_.scala.collection.Map[String, String]]]
      )
    case _root_.scala.None =>
      if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("TOpenSessionReq"))
      else {
        TOpenSessionReq(
          fieldArray(0).asInstanceOf[org.apache.hive.service.rpc.thrift.TProtocolVersion],
          fieldArray(1).asInstanceOf[_root_.scala.Option[String]],
          fieldArray(2).asInstanceOf[_root_.scala.Option[String]],
          fieldArray(3).asInstanceOf[_root_.scala.Option[_root_.scala.collection.Map[String, String]]]
        )
      }
    }
}

