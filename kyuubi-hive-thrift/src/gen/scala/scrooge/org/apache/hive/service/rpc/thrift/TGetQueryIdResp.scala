/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  InvalidFieldsException,
  LazyTProtocol,
  StructBuilder,
  StructBuilderFactory,
  TFieldBlob,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructField,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.reflect.{ClassTag, classTag}


object TGetQueryIdResp extends ValidatingThriftStructCodec3[TGetQueryIdResp] with StructBuilderFactory[TGetQueryIdResp] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TGetQueryIdResp")
  val QueryIdField: TField = new TField("queryId", TType.STRING, 1)
  val QueryIdFieldManifest: Manifest[String] = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      QueryIdField,
      false,
      true,
      QueryIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
    classTag[String].asInstanceOf[ClassTag[_]]
  )

  private[this] val structFields: Seq[ThriftStructField[TGetQueryIdResp]] = {
    Seq(
      new ThriftStructField[TGetQueryIdResp](
        QueryIdField,
        _root_.scala.Some(QueryIdFieldManifest),
        classOf[TGetQueryIdResp]) {
          def getValue[R](struct: TGetQueryIdResp): R = struct.queryId.asInstanceOf[R]
      }
    )
  }

  override lazy val metaData: ThriftStructMetaData[TGetQueryIdResp] =
    new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TGetQueryIdResp): Unit = {
    if (_item.queryId == null) throw new TProtocolException("Required field queryId cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TGetQueryIdResp): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.queryId == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.queryId)
    buf.toList
  }

  def withoutPassthroughFields(original: TGetQueryIdResp): TGetQueryIdResp =
    new Immutable(
      queryId =
        {
          val field = original.queryId
          field
        }
    )

  def newBuilder(): StructBuilder[TGetQueryIdResp] = new TGetQueryIdRespStructBuilder(_root_.scala.None, fieldTypes)

  override def encode(_item: TGetQueryIdResp, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TGetQueryIdResp = {

    var queryIdOffset: Int = -1
    var _got_queryId = false

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                queryIdOffset = _iprot.offsetSkipString
    
                _got_queryId = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'queryId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_queryId) throw new TProtocolException("Required field 'queryId' was not found in serialized data for struct TGetQueryIdResp")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      queryIdOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TGetQueryIdResp =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TGetQueryIdResp = {
    var queryId: String = null
    var _got_queryId = false
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                queryId = readQueryIdValue(_iprot)
                _got_queryId = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'queryId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_queryId) throw new TProtocolException("Required field 'queryId' was not found in serialized data for struct TGetQueryIdResp")
    new Immutable(
      queryId,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    queryId: String
  ): TGetQueryIdResp =
    new Immutable(
      queryId
    )

  def unapply(_item: TGetQueryIdResp): _root_.scala.Option[String] = _root_.scala.Some(_item.queryId)


  @inline private[thrift] def readQueryIdValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeQueryIdField(queryId_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(QueryIdField)
    writeQueryIdValue(queryId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeQueryIdValue(queryId_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(queryId_item)
  }


  object Immutable extends ThriftStructCodec3[TGetQueryIdResp] {
    override def encode(_item: TGetQueryIdResp, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TGetQueryIdResp = TGetQueryIdResp.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TGetQueryIdResp] = TGetQueryIdResp.metaData
  }

  /**
   * The default read-only implementation of TGetQueryIdResp.  You typically should not need to
   * directly reference this class; instead, use the TGetQueryIdResp.apply method to construct
   * new instances.
   */
  class Immutable(
      val queryId: String,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TGetQueryIdResp {
    def this(
      queryId: String
    ) = this(
      queryId,
      immutable$Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      queryIdOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TGetQueryIdResp {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val queryId: String =
      if (queryIdOffset == -1)
        null
      else {
        _proto.decodeString(_buf, queryIdOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TGetQueryIdResp trait with additional state or
   * behavior and implement the read-only methods from TGetQueryIdResp using an underlying
   * instance.
   */
  trait Proxy extends TGetQueryIdResp {
    protected def _underlying_TGetQueryIdResp: TGetQueryIdResp
    override def queryId: String = _underlying_TGetQueryIdResp.queryId
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TGetQueryIdResp._passthroughFields
  }
}

/**
 * Prefer the companion object's [[org.apache.hive.service.rpc.thrift.TGetQueryIdResp.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TGetQueryIdResp
  extends ThriftStruct
  with _root_.scala.Product1[String]
  with ValidatingThriftStruct[TGetQueryIdResp]
  with java.io.Serializable
{
  import TGetQueryIdResp._

  def queryId: String

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: String = queryId


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (queryId ne null) {
                writeQueryIdValue(queryId, _oprot)
                _root_.scala.Some(TGetQueryIdResp.QueryIdField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TGetQueryIdResp = {
    var queryId: String = this.queryId
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        queryId = readQueryIdValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      queryId,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TGetQueryIdResp = {
    var queryId: String = this.queryId

    _fieldId match {
      case 1 =>
        queryId = null
      case _ =>
    }
    new Immutable(
      queryId,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetQueryId: TGetQueryIdResp = unsetField(1)


  override def write(_oprot: TProtocol): Unit = {
    TGetQueryIdResp.validate(this)
    _oprot.writeStructBegin(Struct)
    if (queryId ne null) writeQueryIdField(queryId, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    queryId: String = this.queryId,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TGetQueryIdResp =
    new Immutable(
      queryId,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TGetQueryIdResp]

  private def _equals(x: TGetQueryIdResp, y: TGetQueryIdResp): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TGetQueryIdResp])

  override def hashCode: Int = {
    _root_.scala.runtime.ScalaRunTime._hashCode(this)
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 1

  override def productElement(n: Int): Any = n match {
    case 0 => this.queryId
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TGetQueryIdResp"

  def _codec: ValidatingThriftStructCodec3[TGetQueryIdResp] = TGetQueryIdResp

  def newBuilder(): StructBuilder[TGetQueryIdResp] = new TGetQueryIdRespStructBuilder(_root_.scala.Some(this), fieldTypes)
}

private[thrift] class TGetQueryIdRespStructBuilder(instance: _root_.scala.Option[TGetQueryIdResp], fieldTypes: IndexedSeq[ClassTag[_]])
    extends StructBuilder[TGetQueryIdResp](fieldTypes) {

  def build(): TGetQueryIdResp = instance match {
    case _root_.scala.Some(i) =>
      TGetQueryIdResp(
        (if (fieldArray(0) == null) i.queryId else fieldArray(0)).asInstanceOf[String]
      )
    case _root_.scala.None =>
      if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("TGetQueryIdResp"))
      else {
        TGetQueryIdResp(
          fieldArray(0).asInstanceOf[String]
        )
      }
    }
}

