/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

import com.twitter.scrooge.ThriftEnum
import scala.collection.immutable.{Map => immutable$Map}


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object TTypeId extends _root_.com.twitter.scrooge.ThriftEnumObject[TTypeId] {

  val annotations: immutable$Map[String, String] = immutable$Map.empty

  
  case object BooleanType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 0
    val name: String = "BooleanType"
    val originalName: String = "BOOLEAN_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeBooleanType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.BooleanType)
  
  case object TinyintType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 1
    val name: String = "TinyintType"
    val originalName: String = "TINYINT_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeTinyintType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.TinyintType)
  
  case object SmallintType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 2
    val name: String = "SmallintType"
    val originalName: String = "SMALLINT_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeSmallintType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.SmallintType)
  
  case object IntType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 3
    val name: String = "IntType"
    val originalName: String = "INT_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeIntType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.IntType)
  
  case object BigintType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 4
    val name: String = "BigintType"
    val originalName: String = "BIGINT_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeBigintType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.BigintType)
  
  case object FloatType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 5
    val name: String = "FloatType"
    val originalName: String = "FLOAT_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeFloatType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.FloatType)
  
  case object DoubleType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 6
    val name: String = "DoubleType"
    val originalName: String = "DOUBLE_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeDoubleType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.DoubleType)
  
  case object StringType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 7
    val name: String = "StringType"
    val originalName: String = "STRING_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeStringType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.StringType)
  
  case object TimestampType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 8
    val name: String = "TimestampType"
    val originalName: String = "TIMESTAMP_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeTimestampType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.TimestampType)
  
  case object BinaryType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 9
    val name: String = "BinaryType"
    val originalName: String = "BINARY_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeBinaryType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.BinaryType)
  
  case object ArrayType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 10
    val name: String = "ArrayType"
    val originalName: String = "ARRAY_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeArrayType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.ArrayType)
  
  case object MapType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 11
    val name: String = "MapType"
    val originalName: String = "MAP_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeMapType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.MapType)
  
  case object StructType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 12
    val name: String = "StructType"
    val originalName: String = "STRUCT_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeStructType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.StructType)
  
  case object UnionType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 13
    val name: String = "UnionType"
    val originalName: String = "UNION_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeUnionType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.UnionType)
  
  case object UserDefinedType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 14
    val name: String = "UserDefinedType"
    val originalName: String = "USER_DEFINED_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeUserDefinedType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.UserDefinedType)
  
  case object DecimalType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 15
    val name: String = "DecimalType"
    val originalName: String = "DECIMAL_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeDecimalType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.DecimalType)
  
  case object NullType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 16
    val name: String = "NullType"
    val originalName: String = "NULL_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeNullType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.NullType)
  
  case object DateType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 17
    val name: String = "DateType"
    val originalName: String = "DATE_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeDateType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.DateType)
  
  case object VarcharType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 18
    val name: String = "VarcharType"
    val originalName: String = "VARCHAR_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeVarcharType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.VarcharType)
  
  case object CharType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 19
    val name: String = "CharType"
    val originalName: String = "CHAR_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeCharType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.CharType)
  
  case object IntervalYearMonthType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 20
    val name: String = "IntervalYearMonthType"
    val originalName: String = "INTERVAL_YEAR_MONTH_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeIntervalYearMonthType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.IntervalYearMonthType)
  
  case object IntervalDayTimeType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 21
    val name: String = "IntervalDayTimeType"
    val originalName: String = "INTERVAL_DAY_TIME_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeIntervalDayTimeType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.IntervalDayTimeType)
  
  case object TimestamplocaltzType extends org.apache.hive.service.rpc.thrift.TTypeId {
    val value: Int = 22
    val name: String = "TimestamplocaltzType"
    val originalName: String = "TIMESTAMPLOCALTZ_TYPE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeTimestamplocaltzType = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TTypeId.TimestamplocaltzType)

  case class EnumUnknownTTypeId(value: Int)
    extends org.apache.hive.service.rpc.thrift.TTypeId with _root_.com.twitter.scrooge.EnumItemUnknown
  {
    val name: String = "EnumUnknownTTypeId" + value
    def originalName: String = name
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   */
  def apply(value: Int): org.apache.hive.service.rpc.thrift.TTypeId =
    value match {
      case 0 => org.apache.hive.service.rpc.thrift.TTypeId.BooleanType
      case 1 => org.apache.hive.service.rpc.thrift.TTypeId.TinyintType
      case 2 => org.apache.hive.service.rpc.thrift.TTypeId.SmallintType
      case 3 => org.apache.hive.service.rpc.thrift.TTypeId.IntType
      case 4 => org.apache.hive.service.rpc.thrift.TTypeId.BigintType
      case 5 => org.apache.hive.service.rpc.thrift.TTypeId.FloatType
      case 6 => org.apache.hive.service.rpc.thrift.TTypeId.DoubleType
      case 7 => org.apache.hive.service.rpc.thrift.TTypeId.StringType
      case 8 => org.apache.hive.service.rpc.thrift.TTypeId.TimestampType
      case 9 => org.apache.hive.service.rpc.thrift.TTypeId.BinaryType
      case 10 => org.apache.hive.service.rpc.thrift.TTypeId.ArrayType
      case 11 => org.apache.hive.service.rpc.thrift.TTypeId.MapType
      case 12 => org.apache.hive.service.rpc.thrift.TTypeId.StructType
      case 13 => org.apache.hive.service.rpc.thrift.TTypeId.UnionType
      case 14 => org.apache.hive.service.rpc.thrift.TTypeId.UserDefinedType
      case 15 => org.apache.hive.service.rpc.thrift.TTypeId.DecimalType
      case 16 => org.apache.hive.service.rpc.thrift.TTypeId.NullType
      case 17 => org.apache.hive.service.rpc.thrift.TTypeId.DateType
      case 18 => org.apache.hive.service.rpc.thrift.TTypeId.VarcharType
      case 19 => org.apache.hive.service.rpc.thrift.TTypeId.CharType
      case 20 => org.apache.hive.service.rpc.thrift.TTypeId.IntervalYearMonthType
      case 21 => org.apache.hive.service.rpc.thrift.TTypeId.IntervalDayTimeType
      case 22 => org.apache.hive.service.rpc.thrift.TTypeId.TimestamplocaltzType
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownTTypeId(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): org.apache.hive.service.rpc.thrift.TTypeId =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownTTypeId(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[org.apache.hive.service.rpc.thrift.TTypeId] =
    value match {
      case 0 => _SomeBooleanType
      case 1 => _SomeTinyintType
      case 2 => _SomeSmallintType
      case 3 => _SomeIntType
      case 4 => _SomeBigintType
      case 5 => _SomeFloatType
      case 6 => _SomeDoubleType
      case 7 => _SomeStringType
      case 8 => _SomeTimestampType
      case 9 => _SomeBinaryType
      case 10 => _SomeArrayType
      case 11 => _SomeMapType
      case 12 => _SomeStructType
      case 13 => _SomeUnionType
      case 14 => _SomeUserDefinedType
      case 15 => _SomeDecimalType
      case 16 => _SomeNullType
      case 17 => _SomeDateType
      case 18 => _SomeVarcharType
      case 19 => _SomeCharType
      case 20 => _SomeIntervalYearMonthType
      case 21 => _SomeIntervalDayTimeType
      case 22 => _SomeTimestamplocaltzType
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[org.apache.hive.service.rpc.thrift.TTypeId] =
    name.toLowerCase match {
      case "booleantype" => _SomeBooleanType
      case "tinyinttype" => _SomeTinyintType
      case "smallinttype" => _SomeSmallintType
      case "inttype" => _SomeIntType
      case "biginttype" => _SomeBigintType
      case "floattype" => _SomeFloatType
      case "doubletype" => _SomeDoubleType
      case "stringtype" => _SomeStringType
      case "timestamptype" => _SomeTimestampType
      case "binarytype" => _SomeBinaryType
      case "arraytype" => _SomeArrayType
      case "maptype" => _SomeMapType
      case "structtype" => _SomeStructType
      case "uniontype" => _SomeUnionType
      case "userdefinedtype" => _SomeUserDefinedType
      case "decimaltype" => _SomeDecimalType
      case "nulltype" => _SomeNullType
      case "datetype" => _SomeDateType
      case "varchartype" => _SomeVarcharType
      case "chartype" => _SomeCharType
      case "intervalyearmonthtype" => _SomeIntervalYearMonthType
      case "intervaldaytimetype" => _SomeIntervalDayTimeType
      case "timestamplocaltztype" => _SomeTimestamplocaltzType
      case _ => _root_.scala.None
    }

  lazy val list: List[org.apache.hive.service.rpc.thrift.TTypeId] = scala.List[org.apache.hive.service.rpc.thrift.TTypeId](
    org.apache.hive.service.rpc.thrift.TTypeId.BooleanType,
    org.apache.hive.service.rpc.thrift.TTypeId.TinyintType,
    org.apache.hive.service.rpc.thrift.TTypeId.SmallintType,
    org.apache.hive.service.rpc.thrift.TTypeId.IntType,
    org.apache.hive.service.rpc.thrift.TTypeId.BigintType,
    org.apache.hive.service.rpc.thrift.TTypeId.FloatType,
    org.apache.hive.service.rpc.thrift.TTypeId.DoubleType,
    org.apache.hive.service.rpc.thrift.TTypeId.StringType,
    org.apache.hive.service.rpc.thrift.TTypeId.TimestampType,
    org.apache.hive.service.rpc.thrift.TTypeId.BinaryType,
    org.apache.hive.service.rpc.thrift.TTypeId.ArrayType,
    org.apache.hive.service.rpc.thrift.TTypeId.MapType,
    org.apache.hive.service.rpc.thrift.TTypeId.StructType,
    org.apache.hive.service.rpc.thrift.TTypeId.UnionType,
    org.apache.hive.service.rpc.thrift.TTypeId.UserDefinedType,
    org.apache.hive.service.rpc.thrift.TTypeId.DecimalType,
    org.apache.hive.service.rpc.thrift.TTypeId.NullType,
    org.apache.hive.service.rpc.thrift.TTypeId.DateType,
    org.apache.hive.service.rpc.thrift.TTypeId.VarcharType,
    org.apache.hive.service.rpc.thrift.TTypeId.CharType,
    org.apache.hive.service.rpc.thrift.TTypeId.IntervalYearMonthType,
    org.apache.hive.service.rpc.thrift.TTypeId.IntervalDayTimeType,
    org.apache.hive.service.rpc.thrift.TTypeId.TimestamplocaltzType
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait TTypeId extends ThriftEnum with Serializable