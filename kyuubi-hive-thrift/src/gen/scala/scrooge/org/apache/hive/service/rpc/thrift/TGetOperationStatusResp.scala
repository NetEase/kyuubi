/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  InvalidFieldsException,
  LazyTProtocol,
  StructBuilder,
  StructBuilderFactory,
  TFieldBlob,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructField,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.reflect.{ClassTag, classTag}


object TGetOperationStatusResp extends ValidatingThriftStructCodec3[TGetOperationStatusResp] with StructBuilderFactory[TGetOperationStatusResp] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TGetOperationStatusResp")
  val StatusField: TField = new TField("status", TType.STRUCT, 1)
  val StatusFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TStatus] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TStatus]]
  val OperationStateField: TField = new TField("operationState", TType.ENUM, 2)
  val OperationStateFieldI32: TField = new TField("operationState", TType.I32, 2)
  val OperationStateFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TOperationState] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TOperationState]]
  val SqlStateField: TField = new TField("sqlState", TType.STRING, 3)
  val SqlStateFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val ErrorCodeField: TField = new TField("errorCode", TType.I32, 4)
  val ErrorCodeFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val ErrorMessageField: TField = new TField("errorMessage", TType.STRING, 5)
  val ErrorMessageFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val TaskStatusField: TField = new TField("taskStatus", TType.STRING, 6)
  val TaskStatusFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val OperationStartedField: TField = new TField("operationStarted", TType.I64, 7)
  val OperationStartedFieldManifest: Manifest[Long] = implicitly[Manifest[Long]]
  val OperationCompletedField: TField = new TField("operationCompleted", TType.I64, 8)
  val OperationCompletedFieldManifest: Manifest[Long] = implicitly[Manifest[Long]]
  val HasResultSetField: TField = new TField("hasResultSet", TType.BOOL, 9)
  val HasResultSetFieldManifest: Manifest[Boolean] = implicitly[Manifest[Boolean]]
  val ProgressUpdateResponseField: TField = new TField("progressUpdateResponse", TType.STRUCT, 10)
  val ProgressUpdateResponseFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TProgressUpdateResp] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TProgressUpdateResp]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      StatusField,
      false,
      true,
      StatusFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      OperationStateField,
      true,
      false,
      OperationStateFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SqlStateField,
      true,
      false,
      SqlStateFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ErrorCodeField,
      true,
      false,
      ErrorCodeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ErrorMessageField,
      true,
      false,
      ErrorMessageFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      TaskStatusField,
      true,
      false,
      TaskStatusFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      OperationStartedField,
      true,
      false,
      OperationStartedFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      OperationCompletedField,
      true,
      false,
      OperationCompletedFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      HasResultSetField,
      true,
      false,
      HasResultSetFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ProgressUpdateResponseField,
      true,
      false,
      ProgressUpdateResponseFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
    classTag[org.apache.hive.service.rpc.thrift.TStatus].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[Int]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[Long]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[Long]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[Boolean]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp]].asInstanceOf[ClassTag[_]]
  )

  private[this] val structFields: Seq[ThriftStructField[TGetOperationStatusResp]] = {
    Seq(
      new ThriftStructField[TGetOperationStatusResp](
        StatusField,
        _root_.scala.Some(StatusFieldManifest),
        classOf[TGetOperationStatusResp]) {
          def getValue[R](struct: TGetOperationStatusResp): R = struct.status.asInstanceOf[R]
      },
      new ThriftStructField[TGetOperationStatusResp](
        OperationStateField,
        _root_.scala.Some(OperationStateFieldManifest),
        classOf[TGetOperationStatusResp]) {
          def getValue[R](struct: TGetOperationStatusResp): R = struct.operationState.asInstanceOf[R]
      },
      new ThriftStructField[TGetOperationStatusResp](
        SqlStateField,
        _root_.scala.Some(SqlStateFieldManifest),
        classOf[TGetOperationStatusResp]) {
          def getValue[R](struct: TGetOperationStatusResp): R = struct.sqlState.asInstanceOf[R]
      },
      new ThriftStructField[TGetOperationStatusResp](
        ErrorCodeField,
        _root_.scala.Some(ErrorCodeFieldManifest),
        classOf[TGetOperationStatusResp]) {
          def getValue[R](struct: TGetOperationStatusResp): R = struct.errorCode.asInstanceOf[R]
      },
      new ThriftStructField[TGetOperationStatusResp](
        ErrorMessageField,
        _root_.scala.Some(ErrorMessageFieldManifest),
        classOf[TGetOperationStatusResp]) {
          def getValue[R](struct: TGetOperationStatusResp): R = struct.errorMessage.asInstanceOf[R]
      },
      new ThriftStructField[TGetOperationStatusResp](
        TaskStatusField,
        _root_.scala.Some(TaskStatusFieldManifest),
        classOf[TGetOperationStatusResp]) {
          def getValue[R](struct: TGetOperationStatusResp): R = struct.taskStatus.asInstanceOf[R]
      },
      new ThriftStructField[TGetOperationStatusResp](
        OperationStartedField,
        _root_.scala.Some(OperationStartedFieldManifest),
        classOf[TGetOperationStatusResp]) {
          def getValue[R](struct: TGetOperationStatusResp): R = struct.operationStarted.asInstanceOf[R]
      },
      new ThriftStructField[TGetOperationStatusResp](
        OperationCompletedField,
        _root_.scala.Some(OperationCompletedFieldManifest),
        classOf[TGetOperationStatusResp]) {
          def getValue[R](struct: TGetOperationStatusResp): R = struct.operationCompleted.asInstanceOf[R]
      },
      new ThriftStructField[TGetOperationStatusResp](
        HasResultSetField,
        _root_.scala.Some(HasResultSetFieldManifest),
        classOf[TGetOperationStatusResp]) {
          def getValue[R](struct: TGetOperationStatusResp): R = struct.hasResultSet.asInstanceOf[R]
      },
      new ThriftStructField[TGetOperationStatusResp](
        ProgressUpdateResponseField,
        _root_.scala.Some(ProgressUpdateResponseFieldManifest),
        classOf[TGetOperationStatusResp]) {
          def getValue[R](struct: TGetOperationStatusResp): R = struct.progressUpdateResponse.asInstanceOf[R]
      }
    )
  }

  override lazy val metaData: ThriftStructMetaData[TGetOperationStatusResp] =
    new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TGetOperationStatusResp): Unit = {
    if (_item.status == null) throw new TProtocolException("Required field status cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TGetOperationStatusResp): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.status == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.status)
    buf ++= validateField(item.operationState)
    buf ++= validateField(item.sqlState)
    buf ++= validateField(item.errorCode)
    buf ++= validateField(item.errorMessage)
    buf ++= validateField(item.taskStatus)
    buf ++= validateField(item.operationStarted)
    buf ++= validateField(item.operationCompleted)
    buf ++= validateField(item.hasResultSet)
    buf ++= validateField(item.progressUpdateResponse)
    buf.toList
  }

  def withoutPassthroughFields(original: TGetOperationStatusResp): TGetOperationStatusResp =
    new Immutable(
      status =
        {
          val field = original.status
          org.apache.hive.service.rpc.thrift.TStatus.withoutPassthroughFields(field)
        },
      operationState =
        {
          val field = original.operationState
          field.map { field =>
            field
          }
        },
      sqlState =
        {
          val field = original.sqlState
          field.map { field =>
            field
          }
        },
      errorCode =
        {
          val field = original.errorCode
          field.map { field =>
            field
          }
        },
      errorMessage =
        {
          val field = original.errorMessage
          field.map { field =>
            field
          }
        },
      taskStatus =
        {
          val field = original.taskStatus
          field.map { field =>
            field
          }
        },
      operationStarted =
        {
          val field = original.operationStarted
          field.map { field =>
            field
          }
        },
      operationCompleted =
        {
          val field = original.operationCompleted
          field.map { field =>
            field
          }
        },
      hasResultSet =
        {
          val field = original.hasResultSet
          field.map { field =>
            field
          }
        },
      progressUpdateResponse =
        {
          val field = original.progressUpdateResponse
          field.map { field =>
            org.apache.hive.service.rpc.thrift.TProgressUpdateResp.withoutPassthroughFields(field)
          }
        }
    )

  def newBuilder(): StructBuilder[TGetOperationStatusResp] = new TGetOperationStatusRespStructBuilder(_root_.scala.None, fieldTypes)

  override def encode(_item: TGetOperationStatusResp, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TGetOperationStatusResp = {

    var status: org.apache.hive.service.rpc.thrift.TStatus = null
    var _got_status = false
    var operationState: Option[org.apache.hive.service.rpc.thrift.TOperationState] = None
    var sqlStateOffset: Int = -1
    var errorCodeOffset: Int = -1
    var errorMessageOffset: Int = -1
    var taskStatusOffset: Int = -1
    var operationStartedOffset: Int = -1
    var operationCompletedOffset: Int = -1
    var hasResultSetOffset: Int = -1
    var progressUpdateResponse: Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp] = None

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                status = readStatusValue(_iprot)
                _got_status = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'status' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
    
                operationState = Some(readOperationStateValue(_iprot))
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'operationState' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                sqlStateOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'sqlState' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
                errorCodeOffset = _iprot.offsetSkipI32
    
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'errorCode' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                errorMessageOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'errorMessage' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                taskStatusOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'taskStatus' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.I64 =>
                operationStartedOffset = _iprot.offsetSkipI64
    
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'operationStarted' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I64 =>
                operationCompletedOffset = _iprot.offsetSkipI64
    
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'operationCompleted' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.BOOL =>
                hasResultSetOffset = _iprot.offsetSkipBool
    
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'hasResultSet' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                progressUpdateResponse = Some(readProgressUpdateResponseValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'progressUpdateResponse' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_status) throw new TProtocolException("Required field 'status' was not found in serialized data for struct TGetOperationStatusResp")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      status,
      operationState,
      sqlStateOffset,
      errorCodeOffset,
      errorMessageOffset,
      taskStatusOffset,
      operationStartedOffset,
      operationCompletedOffset,
      hasResultSetOffset,
      progressUpdateResponse,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TGetOperationStatusResp =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TGetOperationStatusResp = {
    var status: org.apache.hive.service.rpc.thrift.TStatus = null
    var _got_status = false
    var operationState: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState] = _root_.scala.None
    var sqlState: _root_.scala.Option[String] = _root_.scala.None
    var errorCode: _root_.scala.Option[Int] = _root_.scala.None
    var errorMessage: _root_.scala.Option[String] = _root_.scala.None
    var taskStatus: _root_.scala.Option[String] = _root_.scala.None
    var operationStarted: _root_.scala.Option[Long] = _root_.scala.None
    var operationCompleted: _root_.scala.Option[Long] = _root_.scala.None
    var hasResultSet: _root_.scala.Option[Boolean] = _root_.scala.None
    var progressUpdateResponse: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
                status = readStatusValue(_iprot)
                _got_status = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'status' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                operationState = _root_.scala.Some(readOperationStateValue(_iprot))
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'operationState' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                sqlState = _root_.scala.Some(readSqlStateValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'sqlState' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
                errorCode = _root_.scala.Some(readErrorCodeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'errorCode' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                errorMessage = _root_.scala.Some(readErrorMessageValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'errorMessage' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                taskStatus = _root_.scala.Some(readTaskStatusValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'taskStatus' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.I64 =>
                operationStarted = _root_.scala.Some(readOperationStartedValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'operationStarted' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I64 =>
                operationCompleted = _root_.scala.Some(readOperationCompletedValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'operationCompleted' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.BOOL =>
                hasResultSet = _root_.scala.Some(readHasResultSetValue(_iprot))
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'hasResultSet' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.STRUCT =>
                progressUpdateResponse = _root_.scala.Some(readProgressUpdateResponseValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'progressUpdateResponse' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_status) throw new TProtocolException("Required field 'status' was not found in serialized data for struct TGetOperationStatusResp")
    new Immutable(
      status,
      operationState,
      sqlState,
      errorCode,
      errorMessage,
      taskStatus,
      operationStarted,
      operationCompleted,
      hasResultSet,
      progressUpdateResponse,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    status: org.apache.hive.service.rpc.thrift.TStatus,
    operationState: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState] = _root_.scala.None,
    sqlState: _root_.scala.Option[String] = _root_.scala.None,
    errorCode: _root_.scala.Option[Int] = _root_.scala.None,
    errorMessage: _root_.scala.Option[String] = _root_.scala.None,
    taskStatus: _root_.scala.Option[String] = _root_.scala.None,
    operationStarted: _root_.scala.Option[Long] = _root_.scala.None,
    operationCompleted: _root_.scala.Option[Long] = _root_.scala.None,
    hasResultSet: _root_.scala.Option[Boolean] = _root_.scala.None,
    progressUpdateResponse: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp] = _root_.scala.None
  ): TGetOperationStatusResp =
    new Immutable(
      status,
      operationState,
      sqlState,
      errorCode,
      errorMessage,
      taskStatus,
      operationStarted,
      operationCompleted,
      hasResultSet,
      progressUpdateResponse
    )

  def unapply(_item: TGetOperationStatusResp): _root_.scala.Option[_root_.scala.Tuple10[org.apache.hive.service.rpc.thrift.TStatus, Option[org.apache.hive.service.rpc.thrift.TOperationState], Option[String], Option[Int], Option[String], Option[String], Option[Long], Option[Long], Option[Boolean], Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp]]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readStatusValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TStatus = {
    org.apache.hive.service.rpc.thrift.TStatus.decode(_iprot)
  }

  @inline private def writeStatusField(status_item: org.apache.hive.service.rpc.thrift.TStatus, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(StatusField)
    writeStatusValue(status_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeStatusValue(status_item: org.apache.hive.service.rpc.thrift.TStatus, _oprot: TProtocol): Unit = {
    status_item.write(_oprot)
  }

  @inline private[thrift] def readOperationStateValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TOperationState = {
    org.apache.hive.service.rpc.thrift.TOperationState.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeOperationStateField(operationState_item: org.apache.hive.service.rpc.thrift.TOperationState, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(OperationStateFieldI32)
    writeOperationStateValue(operationState_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeOperationStateValue(operationState_item: org.apache.hive.service.rpc.thrift.TOperationState, _oprot: TProtocol): Unit = {
    _oprot.writeI32(operationState_item.value)
  }

  @inline private[thrift] def readSqlStateValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeSqlStateField(sqlState_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SqlStateField)
    writeSqlStateValue(sqlState_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSqlStateValue(sqlState_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(sqlState_item)
  }

  @inline private[thrift] def readErrorCodeValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeErrorCodeField(errorCode_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ErrorCodeField)
    writeErrorCodeValue(errorCode_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeErrorCodeValue(errorCode_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(errorCode_item)
  }

  @inline private[thrift] def readErrorMessageValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeErrorMessageField(errorMessage_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ErrorMessageField)
    writeErrorMessageValue(errorMessage_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeErrorMessageValue(errorMessage_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(errorMessage_item)
  }

  @inline private[thrift] def readTaskStatusValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeTaskStatusField(taskStatus_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TaskStatusField)
    writeTaskStatusValue(taskStatus_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTaskStatusValue(taskStatus_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(taskStatus_item)
  }

  @inline private[thrift] def readOperationStartedValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeOperationStartedField(operationStarted_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(OperationStartedField)
    writeOperationStartedValue(operationStarted_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeOperationStartedValue(operationStarted_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(operationStarted_item)
  }

  @inline private[thrift] def readOperationCompletedValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeOperationCompletedField(operationCompleted_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(OperationCompletedField)
    writeOperationCompletedValue(operationCompleted_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeOperationCompletedValue(operationCompleted_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(operationCompleted_item)
  }

  @inline private[thrift] def readHasResultSetValue(_iprot: TProtocol): Boolean = {
    _iprot.readBool()
  }

  @inline private def writeHasResultSetField(hasResultSet_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(HasResultSetField)
    writeHasResultSetValue(hasResultSet_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeHasResultSetValue(hasResultSet_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeBool(hasResultSet_item)
  }

  @inline private[thrift] def readProgressUpdateResponseValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TProgressUpdateResp = {
    org.apache.hive.service.rpc.thrift.TProgressUpdateResp.decode(_iprot)
  }

  @inline private def writeProgressUpdateResponseField(progressUpdateResponse_item: org.apache.hive.service.rpc.thrift.TProgressUpdateResp, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ProgressUpdateResponseField)
    writeProgressUpdateResponseValue(progressUpdateResponse_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeProgressUpdateResponseValue(progressUpdateResponse_item: org.apache.hive.service.rpc.thrift.TProgressUpdateResp, _oprot: TProtocol): Unit = {
    progressUpdateResponse_item.write(_oprot)
  }


  object Immutable extends ThriftStructCodec3[TGetOperationStatusResp] {
    override def encode(_item: TGetOperationStatusResp, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TGetOperationStatusResp = TGetOperationStatusResp.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TGetOperationStatusResp] = TGetOperationStatusResp.metaData
  }

  /**
   * The default read-only implementation of TGetOperationStatusResp.  You typically should not need to
   * directly reference this class; instead, use the TGetOperationStatusResp.apply method to construct
   * new instances.
   */
  class Immutable(
      val status: org.apache.hive.service.rpc.thrift.TStatus,
      val operationState: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState],
      val sqlState: _root_.scala.Option[String],
      val errorCode: _root_.scala.Option[Int],
      val errorMessage: _root_.scala.Option[String],
      val taskStatus: _root_.scala.Option[String],
      val operationStarted: _root_.scala.Option[Long],
      val operationCompleted: _root_.scala.Option[Long],
      val hasResultSet: _root_.scala.Option[Boolean],
      val progressUpdateResponse: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TGetOperationStatusResp {
    def this(
      status: org.apache.hive.service.rpc.thrift.TStatus,
      operationState: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState] = _root_.scala.None,
      sqlState: _root_.scala.Option[String] = _root_.scala.None,
      errorCode: _root_.scala.Option[Int] = _root_.scala.None,
      errorMessage: _root_.scala.Option[String] = _root_.scala.None,
      taskStatus: _root_.scala.Option[String] = _root_.scala.None,
      operationStarted: _root_.scala.Option[Long] = _root_.scala.None,
      operationCompleted: _root_.scala.Option[Long] = _root_.scala.None,
      hasResultSet: _root_.scala.Option[Boolean] = _root_.scala.None,
      progressUpdateResponse: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp] = _root_.scala.None
    ) = this(
      status,
      operationState,
      sqlState,
      errorCode,
      errorMessage,
      taskStatus,
      operationStarted,
      operationCompleted,
      hasResultSet,
      progressUpdateResponse,
      immutable$Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val status: org.apache.hive.service.rpc.thrift.TStatus,
      val operationState: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState],
      sqlStateOffset: Int,
      errorCodeOffset: Int,
      errorMessageOffset: Int,
      taskStatusOffset: Int,
      operationStartedOffset: Int,
      operationCompletedOffset: Int,
      hasResultSetOffset: Int,
      val progressUpdateResponse: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TGetOperationStatusResp {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val sqlState: _root_.scala.Option[String] =
      if (sqlStateOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, sqlStateOffset))
      }
    lazy val errorCode: _root_.scala.Option[Int] =
      if (errorCodeOffset == -1)
        None
      else {
        Some(_proto.decodeI32(_buf, errorCodeOffset))
      }
    lazy val errorMessage: _root_.scala.Option[String] =
      if (errorMessageOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, errorMessageOffset))
      }
    lazy val taskStatus: _root_.scala.Option[String] =
      if (taskStatusOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, taskStatusOffset))
      }
    lazy val operationStarted: _root_.scala.Option[Long] =
      if (operationStartedOffset == -1)
        None
      else {
        Some(_proto.decodeI64(_buf, operationStartedOffset))
      }
    lazy val operationCompleted: _root_.scala.Option[Long] =
      if (operationCompletedOffset == -1)
        None
      else {
        Some(_proto.decodeI64(_buf, operationCompletedOffset))
      }
    lazy val hasResultSet: _root_.scala.Option[Boolean] =
      if (hasResultSetOffset == -1)
        None
      else {
        Some(_proto.decodeBool(_buf, hasResultSetOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TGetOperationStatusResp trait with additional state or
   * behavior and implement the read-only methods from TGetOperationStatusResp using an underlying
   * instance.
   */
  trait Proxy extends TGetOperationStatusResp {
    protected def _underlying_TGetOperationStatusResp: TGetOperationStatusResp
    override def status: org.apache.hive.service.rpc.thrift.TStatus = _underlying_TGetOperationStatusResp.status
    override def operationState: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState] = _underlying_TGetOperationStatusResp.operationState
    override def sqlState: _root_.scala.Option[String] = _underlying_TGetOperationStatusResp.sqlState
    override def errorCode: _root_.scala.Option[Int] = _underlying_TGetOperationStatusResp.errorCode
    override def errorMessage: _root_.scala.Option[String] = _underlying_TGetOperationStatusResp.errorMessage
    override def taskStatus: _root_.scala.Option[String] = _underlying_TGetOperationStatusResp.taskStatus
    override def operationStarted: _root_.scala.Option[Long] = _underlying_TGetOperationStatusResp.operationStarted
    override def operationCompleted: _root_.scala.Option[Long] = _underlying_TGetOperationStatusResp.operationCompleted
    override def hasResultSet: _root_.scala.Option[Boolean] = _underlying_TGetOperationStatusResp.hasResultSet
    override def progressUpdateResponse: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp] = _underlying_TGetOperationStatusResp.progressUpdateResponse
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TGetOperationStatusResp._passthroughFields
  }
}

/**
 * Prefer the companion object's [[org.apache.hive.service.rpc.thrift.TGetOperationStatusResp.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TGetOperationStatusResp
  extends ThriftStruct
  with _root_.scala.Product10[org.apache.hive.service.rpc.thrift.TStatus, Option[org.apache.hive.service.rpc.thrift.TOperationState], Option[String], Option[Int], Option[String], Option[String], Option[Long], Option[Long], Option[Boolean], Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp]]
  with ValidatingThriftStruct[TGetOperationStatusResp]
  with java.io.Serializable
{
  import TGetOperationStatusResp._

  def status: org.apache.hive.service.rpc.thrift.TStatus
  def operationState: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState]
  def sqlState: _root_.scala.Option[String]
  def errorCode: _root_.scala.Option[Int]
  def errorMessage: _root_.scala.Option[String]
  def taskStatus: _root_.scala.Option[String]
  def operationStarted: _root_.scala.Option[Long]
  def operationCompleted: _root_.scala.Option[Long]
  def hasResultSet: _root_.scala.Option[Boolean]
  def progressUpdateResponse: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: org.apache.hive.service.rpc.thrift.TStatus = status
  def _2: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState] = operationState
  def _3: _root_.scala.Option[String] = sqlState
  def _4: _root_.scala.Option[Int] = errorCode
  def _5: _root_.scala.Option[String] = errorMessage
  def _6: _root_.scala.Option[String] = taskStatus
  def _7: _root_.scala.Option[Long] = operationStarted
  def _8: _root_.scala.Option[Long] = operationCompleted
  def _9: _root_.scala.Option[Boolean] = hasResultSet
  def _10: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp] = progressUpdateResponse

  def toTuple: _root_.scala.Tuple10[org.apache.hive.service.rpc.thrift.TStatus, Option[org.apache.hive.service.rpc.thrift.TOperationState], Option[String], Option[Int], Option[String], Option[String], Option[Long], Option[Long], Option[Boolean], Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp]] = {
    (
      status,
      operationState,
      sqlState,
      errorCode,
      errorMessage,
      taskStatus,
      operationStarted,
      operationCompleted,
      hasResultSet,
      progressUpdateResponse
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (status ne null) {
                writeStatusValue(status, _oprot)
                _root_.scala.Some(TGetOperationStatusResp.StatusField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (operationState.isDefined) {
                writeOperationStateValue(operationState.get, _oprot)
                _root_.scala.Some(TGetOperationStatusResp.OperationStateField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (sqlState.isDefined) {
                writeSqlStateValue(sqlState.get, _oprot)
                _root_.scala.Some(TGetOperationStatusResp.SqlStateField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (errorCode.isDefined) {
                writeErrorCodeValue(errorCode.get, _oprot)
                _root_.scala.Some(TGetOperationStatusResp.ErrorCodeField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (errorMessage.isDefined) {
                writeErrorMessageValue(errorMessage.get, _oprot)
                _root_.scala.Some(TGetOperationStatusResp.ErrorMessageField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (taskStatus.isDefined) {
                writeTaskStatusValue(taskStatus.get, _oprot)
                _root_.scala.Some(TGetOperationStatusResp.TaskStatusField)
              } else {
                _root_.scala.None
              }
            case 7 =>
              if (operationStarted.isDefined) {
                writeOperationStartedValue(operationStarted.get, _oprot)
                _root_.scala.Some(TGetOperationStatusResp.OperationStartedField)
              } else {
                _root_.scala.None
              }
            case 8 =>
              if (operationCompleted.isDefined) {
                writeOperationCompletedValue(operationCompleted.get, _oprot)
                _root_.scala.Some(TGetOperationStatusResp.OperationCompletedField)
              } else {
                _root_.scala.None
              }
            case 9 =>
              if (hasResultSet.isDefined) {
                writeHasResultSetValue(hasResultSet.get, _oprot)
                _root_.scala.Some(TGetOperationStatusResp.HasResultSetField)
              } else {
                _root_.scala.None
              }
            case 10 =>
              if (progressUpdateResponse.isDefined) {
                writeProgressUpdateResponseValue(progressUpdateResponse.get, _oprot)
                _root_.scala.Some(TGetOperationStatusResp.ProgressUpdateResponseField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TGetOperationStatusResp = {
    var status: org.apache.hive.service.rpc.thrift.TStatus = this.status
    var operationState: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState] = this.operationState
    var sqlState: _root_.scala.Option[String] = this.sqlState
    var errorCode: _root_.scala.Option[Int] = this.errorCode
    var errorMessage: _root_.scala.Option[String] = this.errorMessage
    var taskStatus: _root_.scala.Option[String] = this.taskStatus
    var operationStarted: _root_.scala.Option[Long] = this.operationStarted
    var operationCompleted: _root_.scala.Option[Long] = this.operationCompleted
    var hasResultSet: _root_.scala.Option[Boolean] = this.hasResultSet
    var progressUpdateResponse: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp] = this.progressUpdateResponse
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        status = readStatusValue(_blob.read)
      case 2 =>
        operationState = _root_.scala.Some(readOperationStateValue(_blob.read))
      case 3 =>
        sqlState = _root_.scala.Some(readSqlStateValue(_blob.read))
      case 4 =>
        errorCode = _root_.scala.Some(readErrorCodeValue(_blob.read))
      case 5 =>
        errorMessage = _root_.scala.Some(readErrorMessageValue(_blob.read))
      case 6 =>
        taskStatus = _root_.scala.Some(readTaskStatusValue(_blob.read))
      case 7 =>
        operationStarted = _root_.scala.Some(readOperationStartedValue(_blob.read))
      case 8 =>
        operationCompleted = _root_.scala.Some(readOperationCompletedValue(_blob.read))
      case 9 =>
        hasResultSet = _root_.scala.Some(readHasResultSetValue(_blob.read))
      case 10 =>
        progressUpdateResponse = _root_.scala.Some(readProgressUpdateResponseValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      status,
      operationState,
      sqlState,
      errorCode,
      errorMessage,
      taskStatus,
      operationStarted,
      operationCompleted,
      hasResultSet,
      progressUpdateResponse,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TGetOperationStatusResp = {
    var status: org.apache.hive.service.rpc.thrift.TStatus = this.status
    var operationState: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState] = this.operationState
    var sqlState: _root_.scala.Option[String] = this.sqlState
    var errorCode: _root_.scala.Option[Int] = this.errorCode
    var errorMessage: _root_.scala.Option[String] = this.errorMessage
    var taskStatus: _root_.scala.Option[String] = this.taskStatus
    var operationStarted: _root_.scala.Option[Long] = this.operationStarted
    var operationCompleted: _root_.scala.Option[Long] = this.operationCompleted
    var hasResultSet: _root_.scala.Option[Boolean] = this.hasResultSet
    var progressUpdateResponse: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp] = this.progressUpdateResponse

    _fieldId match {
      case 1 =>
        status = null
      case 2 =>
        operationState = _root_.scala.None
      case 3 =>
        sqlState = _root_.scala.None
      case 4 =>
        errorCode = _root_.scala.None
      case 5 =>
        errorMessage = _root_.scala.None
      case 6 =>
        taskStatus = _root_.scala.None
      case 7 =>
        operationStarted = _root_.scala.None
      case 8 =>
        operationCompleted = _root_.scala.None
      case 9 =>
        hasResultSet = _root_.scala.None
      case 10 =>
        progressUpdateResponse = _root_.scala.None
      case _ =>
    }
    new Immutable(
      status,
      operationState,
      sqlState,
      errorCode,
      errorMessage,
      taskStatus,
      operationStarted,
      operationCompleted,
      hasResultSet,
      progressUpdateResponse,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetStatus: TGetOperationStatusResp = unsetField(1)

  def unsetOperationState: TGetOperationStatusResp = unsetField(2)

  def unsetSqlState: TGetOperationStatusResp = unsetField(3)

  def unsetErrorCode: TGetOperationStatusResp = unsetField(4)

  def unsetErrorMessage: TGetOperationStatusResp = unsetField(5)

  def unsetTaskStatus: TGetOperationStatusResp = unsetField(6)

  def unsetOperationStarted: TGetOperationStatusResp = unsetField(7)

  def unsetOperationCompleted: TGetOperationStatusResp = unsetField(8)

  def unsetHasResultSet: TGetOperationStatusResp = unsetField(9)

  def unsetProgressUpdateResponse: TGetOperationStatusResp = unsetField(10)


  override def write(_oprot: TProtocol): Unit = {
    TGetOperationStatusResp.validate(this)
    _oprot.writeStructBegin(Struct)
    if (status ne null) writeStatusField(status, _oprot)
    if (operationState.isDefined) writeOperationStateField(operationState.get, _oprot)
    if (sqlState.isDefined) writeSqlStateField(sqlState.get, _oprot)
    if (errorCode.isDefined) writeErrorCodeField(errorCode.get, _oprot)
    if (errorMessage.isDefined) writeErrorMessageField(errorMessage.get, _oprot)
    if (taskStatus.isDefined) writeTaskStatusField(taskStatus.get, _oprot)
    if (operationStarted.isDefined) writeOperationStartedField(operationStarted.get, _oprot)
    if (operationCompleted.isDefined) writeOperationCompletedField(operationCompleted.get, _oprot)
    if (hasResultSet.isDefined) writeHasResultSetField(hasResultSet.get, _oprot)
    if (progressUpdateResponse.isDefined) writeProgressUpdateResponseField(progressUpdateResponse.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    status: org.apache.hive.service.rpc.thrift.TStatus = this.status,
    operationState: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState] = this.operationState,
    sqlState: _root_.scala.Option[String] = this.sqlState,
    errorCode: _root_.scala.Option[Int] = this.errorCode,
    errorMessage: _root_.scala.Option[String] = this.errorMessage,
    taskStatus: _root_.scala.Option[String] = this.taskStatus,
    operationStarted: _root_.scala.Option[Long] = this.operationStarted,
    operationCompleted: _root_.scala.Option[Long] = this.operationCompleted,
    hasResultSet: _root_.scala.Option[Boolean] = this.hasResultSet,
    progressUpdateResponse: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp] = this.progressUpdateResponse,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TGetOperationStatusResp =
    new Immutable(
      status,
      operationState,
      sqlState,
      errorCode,
      errorMessage,
      taskStatus,
      operationStarted,
      operationCompleted,
      hasResultSet,
      progressUpdateResponse,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TGetOperationStatusResp]

  private def _equals(x: TGetOperationStatusResp, y: TGetOperationStatusResp): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TGetOperationStatusResp])

  override def hashCode: Int = {
    _root_.scala.runtime.ScalaRunTime._hashCode(this)
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 10

  override def productElement(n: Int): Any = n match {
    case 0 => this.status
    case 1 => this.operationState
    case 2 => this.sqlState
    case 3 => this.errorCode
    case 4 => this.errorMessage
    case 5 => this.taskStatus
    case 6 => this.operationStarted
    case 7 => this.operationCompleted
    case 8 => this.hasResultSet
    case 9 => this.progressUpdateResponse
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TGetOperationStatusResp"

  def _codec: ValidatingThriftStructCodec3[TGetOperationStatusResp] = TGetOperationStatusResp

  def newBuilder(): StructBuilder[TGetOperationStatusResp] = new TGetOperationStatusRespStructBuilder(_root_.scala.Some(this), fieldTypes)
}

private[thrift] class TGetOperationStatusRespStructBuilder(instance: _root_.scala.Option[TGetOperationStatusResp], fieldTypes: IndexedSeq[ClassTag[_]])
    extends StructBuilder[TGetOperationStatusResp](fieldTypes) {

  def build(): TGetOperationStatusResp = instance match {
    case _root_.scala.Some(i) =>
      TGetOperationStatusResp(
        (if (fieldArray(0) == null) i.status else fieldArray(0)).asInstanceOf[org.apache.hive.service.rpc.thrift.TStatus],
        (if (fieldArray(1) == null) i.operationState else fieldArray(1)).asInstanceOf[_root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState]],
        (if (fieldArray(2) == null) i.sqlState else fieldArray(2)).asInstanceOf[_root_.scala.Option[String]],
        (if (fieldArray(3) == null) i.errorCode else fieldArray(3)).asInstanceOf[_root_.scala.Option[Int]],
        (if (fieldArray(4) == null) i.errorMessage else fieldArray(4)).asInstanceOf[_root_.scala.Option[String]],
        (if (fieldArray(5) == null) i.taskStatus else fieldArray(5)).asInstanceOf[_root_.scala.Option[String]],
        (if (fieldArray(6) == null) i.operationStarted else fieldArray(6)).asInstanceOf[_root_.scala.Option[Long]],
        (if (fieldArray(7) == null) i.operationCompleted else fieldArray(7)).asInstanceOf[_root_.scala.Option[Long]],
        (if (fieldArray(8) == null) i.hasResultSet else fieldArray(8)).asInstanceOf[_root_.scala.Option[Boolean]],
        (if (fieldArray(9) == null) i.progressUpdateResponse else fieldArray(9)).asInstanceOf[_root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp]]
      )
    case _root_.scala.None =>
      if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("TGetOperationStatusResp"))
      else {
        TGetOperationStatusResp(
          fieldArray(0).asInstanceOf[org.apache.hive.service.rpc.thrift.TStatus],
          fieldArray(1).asInstanceOf[_root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationState]],
          fieldArray(2).asInstanceOf[_root_.scala.Option[String]],
          fieldArray(3).asInstanceOf[_root_.scala.Option[Int]],
          fieldArray(4).asInstanceOf[_root_.scala.Option[String]],
          fieldArray(5).asInstanceOf[_root_.scala.Option[String]],
          fieldArray(6).asInstanceOf[_root_.scala.Option[Long]],
          fieldArray(7).asInstanceOf[_root_.scala.Option[Long]],
          fieldArray(8).asInstanceOf[_root_.scala.Option[Boolean]],
          fieldArray(9).asInstanceOf[_root_.scala.Option[org.apache.hive.service.rpc.thrift.TProgressUpdateResp]]
        )
      }
    }
}

