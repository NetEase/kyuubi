/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  InvalidFieldsException,
  LazyTProtocol,
  StructBuilder,
  StructBuilderFactory,
  TFieldBlob,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructField,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.reflect.{ClassTag, classTag}


object TOpenSessionResp extends ValidatingThriftStructCodec3[TOpenSessionResp] with StructBuilderFactory[TOpenSessionResp] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TOpenSessionResp")
  val StatusField: TField = new TField("status", TType.STRUCT, 1)
  val StatusFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TStatus] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TStatus]]
  val ServerProtocolVersionField: TField = new TField("serverProtocolVersion", TType.ENUM, 2)
  val ServerProtocolVersionFieldI32: TField = new TField("serverProtocolVersion", TType.I32, 2)
  val ServerProtocolVersionFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TProtocolVersion] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TProtocolVersion]]
  val SessionHandleField: TField = new TField("sessionHandle", TType.STRUCT, 3)
  val SessionHandleFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TSessionHandle] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TSessionHandle]]
  val ConfigurationField: TField = new TField("configuration", TType.MAP, 4)
  val ConfigurationFieldManifest: Manifest[_root_.scala.collection.Map[String, String]] = implicitly[Manifest[_root_.scala.collection.Map[String, String]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      StatusField,
      false,
      true,
      StatusFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ServerProtocolVersionField,
      false,
      true,
      ServerProtocolVersionFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[org.apache.hive.service.rpc.thrift.TProtocolVersion](TProtocolVersion.HiveCliServiceProtocolV10)
    ),
    new ThriftStructFieldInfo(
      SessionHandleField,
      true,
      false,
      SessionHandleFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ConfigurationField,
      true,
      false,
      ConfigurationFieldManifest,
      _root_.scala.Some(implicitly[Manifest[String]]),
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
    classTag[org.apache.hive.service.rpc.thrift.TStatus].asInstanceOf[ClassTag[_]],
    classTag[org.apache.hive.service.rpc.thrift.TProtocolVersion].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[_root_.scala.collection.Map[String, String]]].asInstanceOf[ClassTag[_]]
  )

  private[this] val structFields: Seq[ThriftStructField[TOpenSessionResp]] = {
    Seq(
      new ThriftStructField[TOpenSessionResp](
        StatusField,
        _root_.scala.Some(StatusFieldManifest),
        classOf[TOpenSessionResp]) {
          def getValue[R](struct: TOpenSessionResp): R = struct.status.asInstanceOf[R]
      },
      new ThriftStructField[TOpenSessionResp](
        ServerProtocolVersionField,
        _root_.scala.Some(ServerProtocolVersionFieldManifest),
        classOf[TOpenSessionResp]) {
          def getValue[R](struct: TOpenSessionResp): R = struct.serverProtocolVersion.asInstanceOf[R]
      },
      new ThriftStructField[TOpenSessionResp](
        SessionHandleField,
        _root_.scala.Some(SessionHandleFieldManifest),
        classOf[TOpenSessionResp]) {
          def getValue[R](struct: TOpenSessionResp): R = struct.sessionHandle.asInstanceOf[R]
      },
      new ThriftStructField[TOpenSessionResp](
        ConfigurationField,
        _root_.scala.Some(ConfigurationFieldManifest),
        classOf[TOpenSessionResp]) {
          def getValue[R](struct: TOpenSessionResp): R = struct.configuration.asInstanceOf[R]
      }
    )
  }

  override lazy val metaData: ThriftStructMetaData[TOpenSessionResp] =
    new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TOpenSessionResp): Unit = {
    if (_item.status == null) throw new TProtocolException("Required field status cannot be null")
    if (_item.serverProtocolVersion == null) throw new TProtocolException("Required field serverProtocolVersion cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TOpenSessionResp): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.status == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.status)
    if (item.serverProtocolVersion == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(1))
    buf ++= validateField(item.serverProtocolVersion)
    buf ++= validateField(item.sessionHandle)
    buf ++= validateField(item.configuration)
    buf.toList
  }

  def withoutPassthroughFields(original: TOpenSessionResp): TOpenSessionResp =
    new Immutable(
      status =
        {
          val field = original.status
          org.apache.hive.service.rpc.thrift.TStatus.withoutPassthroughFields(field)
        },
      serverProtocolVersion =
        {
          val field = original.serverProtocolVersion
          field
        },
      sessionHandle =
        {
          val field = original.sessionHandle
          field.map { field =>
            org.apache.hive.service.rpc.thrift.TSessionHandle.withoutPassthroughFields(field)
          }
        },
      configuration =
        {
          val field = original.configuration
          field.map { field =>
            field.map { case (key, value) =>
                val newKey = {
                val field = key
                field
              }
  
  
                val newValue = {
                val field = value
                field
              }
  
  
              newKey -> newValue
            }
          }
        }
    )

  def newBuilder(): StructBuilder[TOpenSessionResp] = new TOpenSessionRespStructBuilder(_root_.scala.None, fieldTypes)

  override def encode(_item: TOpenSessionResp, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TOpenSessionResp = {

    var status: org.apache.hive.service.rpc.thrift.TStatus = null
    var _got_status = false
    var serverProtocolVersion: org.apache.hive.service.rpc.thrift.TProtocolVersion = TProtocolVersion.HiveCliServiceProtocolV10
    var _got_serverProtocolVersion = false
    var sessionHandle: Option[org.apache.hive.service.rpc.thrift.TSessionHandle] = None
    var configuration: Option[_root_.scala.collection.Map[String, String]] = None

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                status = readStatusValue(_iprot)
                _got_status = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'status' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
    
                serverProtocolVersion = readServerProtocolVersionValue(_iprot)
                _got_serverProtocolVersion = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'serverProtocolVersion' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                sessionHandle = Some(readSessionHandleValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'sessionHandle' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.MAP =>
    
                configuration = Some(readConfigurationValue(_iprot))
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'configuration' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_status) throw new TProtocolException("Required field 'status' was not found in serialized data for struct TOpenSessionResp")
    if (!_got_serverProtocolVersion) throw new TProtocolException("Required field 'serverProtocolVersion' was not found in serialized data for struct TOpenSessionResp")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      status,
      serverProtocolVersion,
      sessionHandle,
      configuration,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TOpenSessionResp =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TOpenSessionResp = {
    var status: org.apache.hive.service.rpc.thrift.TStatus = null
    var _got_status = false
    var serverProtocolVersion: org.apache.hive.service.rpc.thrift.TProtocolVersion = TProtocolVersion.HiveCliServiceProtocolV10
    var _got_serverProtocolVersion = false
    var sessionHandle: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle] = _root_.scala.None
    var configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
                status = readStatusValue(_iprot)
                _got_status = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'status' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                serverProtocolVersion = readServerProtocolVersionValue(_iprot)
                _got_serverProtocolVersion = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'serverProtocolVersion' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRUCT =>
                sessionHandle = _root_.scala.Some(readSessionHandleValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'sessionHandle' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.MAP =>
                configuration = _root_.scala.Some(readConfigurationValue(_iprot))
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'configuration' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_status) throw new TProtocolException("Required field 'status' was not found in serialized data for struct TOpenSessionResp")
    if (!_got_serverProtocolVersion) throw new TProtocolException("Required field 'serverProtocolVersion' was not found in serialized data for struct TOpenSessionResp")
    new Immutable(
      status,
      serverProtocolVersion,
      sessionHandle,
      configuration,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    status: org.apache.hive.service.rpc.thrift.TStatus,
    serverProtocolVersion: org.apache.hive.service.rpc.thrift.TProtocolVersion = TProtocolVersion.HiveCliServiceProtocolV10,
    sessionHandle: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle] = _root_.scala.None,
    configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = _root_.scala.None
  ): TOpenSessionResp =
    new Immutable(
      status,
      serverProtocolVersion,
      sessionHandle,
      configuration
    )

  def unapply(_item: TOpenSessionResp): _root_.scala.Option[_root_.scala.Tuple4[org.apache.hive.service.rpc.thrift.TStatus, org.apache.hive.service.rpc.thrift.TProtocolVersion, Option[org.apache.hive.service.rpc.thrift.TSessionHandle], Option[_root_.scala.collection.Map[String, String]]]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readStatusValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TStatus = {
    org.apache.hive.service.rpc.thrift.TStatus.decode(_iprot)
  }

  @inline private def writeStatusField(status_item: org.apache.hive.service.rpc.thrift.TStatus, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(StatusField)
    writeStatusValue(status_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeStatusValue(status_item: org.apache.hive.service.rpc.thrift.TStatus, _oprot: TProtocol): Unit = {
    status_item.write(_oprot)
  }

  @inline private[thrift] def readServerProtocolVersionValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TProtocolVersion = {
    org.apache.hive.service.rpc.thrift.TProtocolVersion.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeServerProtocolVersionField(serverProtocolVersion_item: org.apache.hive.service.rpc.thrift.TProtocolVersion, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ServerProtocolVersionFieldI32)
    writeServerProtocolVersionValue(serverProtocolVersion_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeServerProtocolVersionValue(serverProtocolVersion_item: org.apache.hive.service.rpc.thrift.TProtocolVersion, _oprot: TProtocol): Unit = {
    _oprot.writeI32(serverProtocolVersion_item.value)
  }

  @inline private[thrift] def readSessionHandleValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TSessionHandle = {
    org.apache.hive.service.rpc.thrift.TSessionHandle.decode(_iprot)
  }

  @inline private def writeSessionHandleField(sessionHandle_item: org.apache.hive.service.rpc.thrift.TSessionHandle, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SessionHandleField)
    writeSessionHandleValue(sessionHandle_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSessionHandleValue(sessionHandle_item: org.apache.hive.service.rpc.thrift.TSessionHandle, _oprot: TProtocol): Unit = {
    sessionHandle_item.write(_oprot)
  }

  @inline private[thrift] def readConfigurationValue(_iprot: TProtocol): _root_.scala.collection.Map[String, String] = {
    val _map = _iprot.readMapBegin()
    if (_map.size == 0) {
      _iprot.readMapEnd()
      Map.empty[String, String]
    } else {
      val _rv = new _root_.scala.collection.mutable.HashMap[String, String]
      var _i = 0
      while (_i < _map.size) {
        val _key = {
          _iprot.readString()
        }
        val _value = {
          _iprot.readString()
        }
        _rv(_key) = _value
        _i += 1
      }
      _iprot.readMapEnd()
      _rv
    }
  }

  @inline private def writeConfigurationField(configuration_item: _root_.scala.collection.Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ConfigurationField)
    writeConfigurationValue(configuration_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeConfigurationValue(configuration_item: _root_.scala.collection.Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, configuration_item.size))
    configuration_item.foreach { case (configuration_item_key, configuration_item_value) =>
      _oprot.writeString(configuration_item_key)
      _oprot.writeString(configuration_item_value)
    }
    _oprot.writeMapEnd()
  }


  object Immutable extends ThriftStructCodec3[TOpenSessionResp] {
    override def encode(_item: TOpenSessionResp, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TOpenSessionResp = TOpenSessionResp.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TOpenSessionResp] = TOpenSessionResp.metaData
  }

  /**
   * The default read-only implementation of TOpenSessionResp.  You typically should not need to
   * directly reference this class; instead, use the TOpenSessionResp.apply method to construct
   * new instances.
   */
  class Immutable(
      val status: org.apache.hive.service.rpc.thrift.TStatus,
      val serverProtocolVersion: org.apache.hive.service.rpc.thrift.TProtocolVersion,
      val sessionHandle: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle],
      val configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TOpenSessionResp {
    def this(
      status: org.apache.hive.service.rpc.thrift.TStatus,
      serverProtocolVersion: org.apache.hive.service.rpc.thrift.TProtocolVersion = TProtocolVersion.HiveCliServiceProtocolV10,
      sessionHandle: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle] = _root_.scala.None,
      configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = _root_.scala.None
    ) = this(
      status,
      serverProtocolVersion,
      sessionHandle,
      configuration,
      immutable$Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val status: org.apache.hive.service.rpc.thrift.TStatus,
      val serverProtocolVersion: org.apache.hive.service.rpc.thrift.TProtocolVersion,
      val sessionHandle: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle],
      val configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TOpenSessionResp {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TOpenSessionResp trait with additional state or
   * behavior and implement the read-only methods from TOpenSessionResp using an underlying
   * instance.
   */
  trait Proxy extends TOpenSessionResp {
    protected def _underlying_TOpenSessionResp: TOpenSessionResp
    override def status: org.apache.hive.service.rpc.thrift.TStatus = _underlying_TOpenSessionResp.status
    override def serverProtocolVersion: org.apache.hive.service.rpc.thrift.TProtocolVersion = _underlying_TOpenSessionResp.serverProtocolVersion
    override def sessionHandle: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle] = _underlying_TOpenSessionResp.sessionHandle
    override def configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = _underlying_TOpenSessionResp.configuration
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TOpenSessionResp._passthroughFields
  }
}

/**
 * Prefer the companion object's [[org.apache.hive.service.rpc.thrift.TOpenSessionResp.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TOpenSessionResp
  extends ThriftStruct
  with _root_.scala.Product4[org.apache.hive.service.rpc.thrift.TStatus, org.apache.hive.service.rpc.thrift.TProtocolVersion, Option[org.apache.hive.service.rpc.thrift.TSessionHandle], Option[_root_.scala.collection.Map[String, String]]]
  with ValidatingThriftStruct[TOpenSessionResp]
  with java.io.Serializable
{
  import TOpenSessionResp._

  def status: org.apache.hive.service.rpc.thrift.TStatus
  def serverProtocolVersion: org.apache.hive.service.rpc.thrift.TProtocolVersion
  def sessionHandle: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle]
  def configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: org.apache.hive.service.rpc.thrift.TStatus = status
  def _2: org.apache.hive.service.rpc.thrift.TProtocolVersion = serverProtocolVersion
  def _3: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle] = sessionHandle
  def _4: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = configuration

  def toTuple: _root_.scala.Tuple4[org.apache.hive.service.rpc.thrift.TStatus, org.apache.hive.service.rpc.thrift.TProtocolVersion, Option[org.apache.hive.service.rpc.thrift.TSessionHandle], Option[_root_.scala.collection.Map[String, String]]] = {
    (
      status,
      serverProtocolVersion,
      sessionHandle,
      configuration
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (status ne null) {
                writeStatusValue(status, _oprot)
                _root_.scala.Some(TOpenSessionResp.StatusField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (serverProtocolVersion ne null) {
                writeServerProtocolVersionValue(serverProtocolVersion, _oprot)
                _root_.scala.Some(TOpenSessionResp.ServerProtocolVersionField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (sessionHandle.isDefined) {
                writeSessionHandleValue(sessionHandle.get, _oprot)
                _root_.scala.Some(TOpenSessionResp.SessionHandleField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (configuration.isDefined) {
                writeConfigurationValue(configuration.get, _oprot)
                _root_.scala.Some(TOpenSessionResp.ConfigurationField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TOpenSessionResp = {
    var status: org.apache.hive.service.rpc.thrift.TStatus = this.status
    var serverProtocolVersion: org.apache.hive.service.rpc.thrift.TProtocolVersion = this.serverProtocolVersion
    var sessionHandle: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle] = this.sessionHandle
    var configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = this.configuration
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        status = readStatusValue(_blob.read)
      case 2 =>
        serverProtocolVersion = readServerProtocolVersionValue(_blob.read)
      case 3 =>
        sessionHandle = _root_.scala.Some(readSessionHandleValue(_blob.read))
      case 4 =>
        configuration = _root_.scala.Some(readConfigurationValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      status,
      serverProtocolVersion,
      sessionHandle,
      configuration,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TOpenSessionResp = {
    var status: org.apache.hive.service.rpc.thrift.TStatus = this.status
    var serverProtocolVersion: org.apache.hive.service.rpc.thrift.TProtocolVersion = this.serverProtocolVersion
    var sessionHandle: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle] = this.sessionHandle
    var configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = this.configuration

    _fieldId match {
      case 1 =>
        status = null
      case 2 =>
        serverProtocolVersion = TProtocolVersion.HiveCliServiceProtocolV10
      case 3 =>
        sessionHandle = _root_.scala.None
      case 4 =>
        configuration = _root_.scala.None
      case _ =>
    }
    new Immutable(
      status,
      serverProtocolVersion,
      sessionHandle,
      configuration,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetStatus: TOpenSessionResp = unsetField(1)

  def unsetServerProtocolVersion: TOpenSessionResp = unsetField(2)

  def unsetSessionHandle: TOpenSessionResp = unsetField(3)

  def unsetConfiguration: TOpenSessionResp = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    TOpenSessionResp.validate(this)
    _oprot.writeStructBegin(Struct)
    if (status ne null) writeStatusField(status, _oprot)
    if (serverProtocolVersion ne null) writeServerProtocolVersionField(serverProtocolVersion, _oprot)
    if (sessionHandle.isDefined) writeSessionHandleField(sessionHandle.get, _oprot)
    if (configuration.isDefined) writeConfigurationField(configuration.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    status: org.apache.hive.service.rpc.thrift.TStatus = this.status,
    serverProtocolVersion: org.apache.hive.service.rpc.thrift.TProtocolVersion = this.serverProtocolVersion,
    sessionHandle: _root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle] = this.sessionHandle,
    configuration: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = this.configuration,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TOpenSessionResp =
    new Immutable(
      status,
      serverProtocolVersion,
      sessionHandle,
      configuration,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TOpenSessionResp]

  private def _equals(x: TOpenSessionResp, y: TOpenSessionResp): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TOpenSessionResp])

  override def hashCode: Int = {
    _root_.scala.runtime.ScalaRunTime._hashCode(this)
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.status
    case 1 => this.serverProtocolVersion
    case 2 => this.sessionHandle
    case 3 => this.configuration
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TOpenSessionResp"

  def _codec: ValidatingThriftStructCodec3[TOpenSessionResp] = TOpenSessionResp

  def newBuilder(): StructBuilder[TOpenSessionResp] = new TOpenSessionRespStructBuilder(_root_.scala.Some(this), fieldTypes)
}

private[thrift] class TOpenSessionRespStructBuilder(instance: _root_.scala.Option[TOpenSessionResp], fieldTypes: IndexedSeq[ClassTag[_]])
    extends StructBuilder[TOpenSessionResp](fieldTypes) {

  def build(): TOpenSessionResp = instance match {
    case _root_.scala.Some(i) =>
      TOpenSessionResp(
        (if (fieldArray(0) == null) i.status else fieldArray(0)).asInstanceOf[org.apache.hive.service.rpc.thrift.TStatus],
        (if (fieldArray(1) == null) i.serverProtocolVersion else fieldArray(1)).asInstanceOf[org.apache.hive.service.rpc.thrift.TProtocolVersion],
        (if (fieldArray(2) == null) i.sessionHandle else fieldArray(2)).asInstanceOf[_root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle]],
        (if (fieldArray(3) == null) i.configuration else fieldArray(3)).asInstanceOf[_root_.scala.Option[_root_.scala.collection.Map[String, String]]]
      )
    case _root_.scala.None =>
      if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("TOpenSessionResp"))
      else {
        TOpenSessionResp(
          fieldArray(0).asInstanceOf[org.apache.hive.service.rpc.thrift.TStatus],
          fieldArray(1).asInstanceOf[org.apache.hive.service.rpc.thrift.TProtocolVersion],
          fieldArray(2).asInstanceOf[_root_.scala.Option[org.apache.hive.service.rpc.thrift.TSessionHandle]],
          fieldArray(3).asInstanceOf[_root_.scala.Option[_root_.scala.collection.Map[String, String]]]
        )
      }
    }
}

