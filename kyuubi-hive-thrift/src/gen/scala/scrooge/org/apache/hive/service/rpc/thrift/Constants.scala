/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
object Constants {
  
  val PRIMITIVE_TYPES: _root_.scala.collection.immutable.Set[org.apache.hive.service.rpc.thrift.TTypeId] = Set(TTypeId.FloatType, TTypeId.TimestamplocaltzType, TTypeId.NullType, TTypeId.StringType, TTypeId.TimestampType, TTypeId.BigintType, TTypeId.SmallintType, TTypeId.DateType, TTypeId.IntType, TTypeId.CharType, TTypeId.IntervalDayTimeType, TTypeId.DoubleType, TTypeId.IntervalYearMonthType, TTypeId.BinaryType, TTypeId.TinyintType, TTypeId.DecimalType, TTypeId.VarcharType, TTypeId.BooleanType)
  
  val COMPLEX_TYPES: _root_.scala.collection.immutable.Set[org.apache.hive.service.rpc.thrift.TTypeId] = Set(TTypeId.MapType, TTypeId.ArrayType, TTypeId.UnionType, TTypeId.StructType, TTypeId.UserDefinedType)
  
  val COLLECTION_TYPES: _root_.scala.collection.immutable.Set[org.apache.hive.service.rpc.thrift.TTypeId] = Set(TTypeId.ArrayType, TTypeId.MapType)
  
  val TYPE_NAMES: _root_.scala.collection.immutable.Map[org.apache.hive.service.rpc.thrift.TTypeId, String] = Map(TTypeId.BooleanType -> "BOOLEAN", TTypeId.TinyintType -> "TINYINT", TTypeId.SmallintType -> "SMALLINT", TTypeId.IntType -> "INT", TTypeId.BigintType -> "BIGINT", TTypeId.FloatType -> "FLOAT", TTypeId.DoubleType -> "DOUBLE", TTypeId.StringType -> "STRING", TTypeId.TimestampType -> "TIMESTAMP", TTypeId.BinaryType -> "BINARY", TTypeId.ArrayType -> "ARRAY", TTypeId.MapType -> "MAP", TTypeId.StructType -> "STRUCT", TTypeId.UnionType -> "UNIONTYPE", TTypeId.DecimalType -> "DECIMAL", TTypeId.NullType -> "NULL", TTypeId.DateType -> "DATE", TTypeId.VarcharType -> "VARCHAR", TTypeId.CharType -> "CHAR", TTypeId.IntervalYearMonthType -> "INTERVAL_YEAR_MONTH", TTypeId.IntervalDayTimeType -> "INTERVAL_DAY_TIME", TTypeId.TimestamplocaltzType -> "TIMESTAMP WITH LOCAL TIME ZONE")
  
  val CHARACTER_MAXIMUM_LENGTH: String = "characterMaximumLength"
  
  val PRECISION: String = "precision"
  
  val SCALE: String = "scale"
}