/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  InvalidFieldsException,
  LazyTProtocol,
  StructBuilder,
  StructBuilderFactory,
  TFieldBlob,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructField,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.reflect.{ClassTag, classTag}


object TOperationHandle extends ValidatingThriftStructCodec3[TOperationHandle] with StructBuilderFactory[TOperationHandle] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TOperationHandle")
  val OperationIdField: TField = new TField("operationId", TType.STRUCT, 1)
  val OperationIdFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.THandleIdentifier] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.THandleIdentifier]]
  val OperationTypeField: TField = new TField("operationType", TType.ENUM, 2)
  val OperationTypeFieldI32: TField = new TField("operationType", TType.I32, 2)
  val OperationTypeFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TOperationType] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TOperationType]]
  val HasResultSetField: TField = new TField("hasResultSet", TType.BOOL, 3)
  val HasResultSetFieldManifest: Manifest[Boolean] = implicitly[Manifest[Boolean]]
  val ModifiedRowCountField: TField = new TField("modifiedRowCount", TType.DOUBLE, 4)
  val ModifiedRowCountFieldManifest: Manifest[Double] = implicitly[Manifest[Double]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      OperationIdField,
      false,
      true,
      OperationIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      OperationTypeField,
      false,
      true,
      OperationTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      HasResultSetField,
      false,
      true,
      HasResultSetFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ModifiedRowCountField,
      true,
      false,
      ModifiedRowCountFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
    classTag[org.apache.hive.service.rpc.thrift.THandleIdentifier].asInstanceOf[ClassTag[_]],
    classTag[org.apache.hive.service.rpc.thrift.TOperationType].asInstanceOf[ClassTag[_]],
    classTag[Boolean].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[Double]].asInstanceOf[ClassTag[_]]
  )

  private[this] val structFields: Seq[ThriftStructField[TOperationHandle]] = {
    Seq(
      new ThriftStructField[TOperationHandle](
        OperationIdField,
        _root_.scala.Some(OperationIdFieldManifest),
        classOf[TOperationHandle]) {
          def getValue[R](struct: TOperationHandle): R = struct.operationId.asInstanceOf[R]
      },
      new ThriftStructField[TOperationHandle](
        OperationTypeField,
        _root_.scala.Some(OperationTypeFieldManifest),
        classOf[TOperationHandle]) {
          def getValue[R](struct: TOperationHandle): R = struct.operationType.asInstanceOf[R]
      },
      new ThriftStructField[TOperationHandle](
        HasResultSetField,
        _root_.scala.Some(HasResultSetFieldManifest),
        classOf[TOperationHandle]) {
          def getValue[R](struct: TOperationHandle): R = struct.hasResultSet.asInstanceOf[R]
      },
      new ThriftStructField[TOperationHandle](
        ModifiedRowCountField,
        _root_.scala.Some(ModifiedRowCountFieldManifest),
        classOf[TOperationHandle]) {
          def getValue[R](struct: TOperationHandle): R = struct.modifiedRowCount.asInstanceOf[R]
      }
    )
  }

  override lazy val metaData: ThriftStructMetaData[TOperationHandle] =
    new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TOperationHandle): Unit = {
    if (_item.operationId == null) throw new TProtocolException("Required field operationId cannot be null")
    if (_item.operationType == null) throw new TProtocolException("Required field operationType cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TOperationHandle): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.operationId == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.operationId)
    if (item.operationType == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(1))
    buf ++= validateField(item.operationType)
    buf ++= validateField(item.hasResultSet)
    buf ++= validateField(item.modifiedRowCount)
    buf.toList
  }

  def withoutPassthroughFields(original: TOperationHandle): TOperationHandle =
    new Immutable(
      operationId =
        {
          val field = original.operationId
          org.apache.hive.service.rpc.thrift.THandleIdentifier.withoutPassthroughFields(field)
        },
      operationType =
        {
          val field = original.operationType
          field
        },
      hasResultSet =
        {
          val field = original.hasResultSet
          field
        },
      modifiedRowCount =
        {
          val field = original.modifiedRowCount
          field.map { field =>
            field
          }
        }
    )

  def newBuilder(): StructBuilder[TOperationHandle] = new TOperationHandleStructBuilder(_root_.scala.None, fieldTypes)

  override def encode(_item: TOperationHandle, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TOperationHandle = {

    var operationId: org.apache.hive.service.rpc.thrift.THandleIdentifier = null
    var _got_operationId = false
    var operationType: org.apache.hive.service.rpc.thrift.TOperationType = null
    var _got_operationType = false
    var hasResultSet: Boolean = false
    var _got_hasResultSet = false
    var modifiedRowCountOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                operationId = readOperationIdValue(_iprot)
                _got_operationId = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'operationId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
    
                operationType = readOperationTypeValue(_iprot)
                _got_operationType = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'operationType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.BOOL =>
    
                hasResultSet = readHasResultSetValue(_iprot)
                _got_hasResultSet = true
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'hasResultSet' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.DOUBLE =>
                modifiedRowCountOffset = _iprot.offsetSkipDouble
    
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'modifiedRowCount' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_operationId) throw new TProtocolException("Required field 'operationId' was not found in serialized data for struct TOperationHandle")
    if (!_got_operationType) throw new TProtocolException("Required field 'operationType' was not found in serialized data for struct TOperationHandle")
    if (!_got_hasResultSet) throw new TProtocolException("Required field 'hasResultSet' was not found in serialized data for struct TOperationHandle")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      operationId,
      operationType,
      hasResultSet,
      modifiedRowCountOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TOperationHandle =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TOperationHandle = {
    var operationId: org.apache.hive.service.rpc.thrift.THandleIdentifier = null
    var _got_operationId = false
    var operationType: org.apache.hive.service.rpc.thrift.TOperationType = null
    var _got_operationType = false
    var hasResultSet: Boolean = false
    var _got_hasResultSet = false
    var modifiedRowCount: _root_.scala.Option[Double] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
                operationId = readOperationIdValue(_iprot)
                _got_operationId = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'operationId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                operationType = readOperationTypeValue(_iprot)
                _got_operationType = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'operationType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.BOOL =>
                hasResultSet = readHasResultSetValue(_iprot)
                _got_hasResultSet = true
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'hasResultSet' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.DOUBLE =>
                modifiedRowCount = _root_.scala.Some(readModifiedRowCountValue(_iprot))
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'modifiedRowCount' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_operationId) throw new TProtocolException("Required field 'operationId' was not found in serialized data for struct TOperationHandle")
    if (!_got_operationType) throw new TProtocolException("Required field 'operationType' was not found in serialized data for struct TOperationHandle")
    if (!_got_hasResultSet) throw new TProtocolException("Required field 'hasResultSet' was not found in serialized data for struct TOperationHandle")
    new Immutable(
      operationId,
      operationType,
      hasResultSet,
      modifiedRowCount,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    operationId: org.apache.hive.service.rpc.thrift.THandleIdentifier,
    operationType: org.apache.hive.service.rpc.thrift.TOperationType,
    hasResultSet: Boolean,
    modifiedRowCount: _root_.scala.Option[Double] = _root_.scala.None
  ): TOperationHandle =
    new Immutable(
      operationId,
      operationType,
      hasResultSet,
      modifiedRowCount
    )

  def unapply(_item: TOperationHandle): _root_.scala.Option[_root_.scala.Tuple4[org.apache.hive.service.rpc.thrift.THandleIdentifier, org.apache.hive.service.rpc.thrift.TOperationType, Boolean, Option[Double]]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readOperationIdValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.THandleIdentifier = {
    org.apache.hive.service.rpc.thrift.THandleIdentifier.decode(_iprot)
  }

  @inline private def writeOperationIdField(operationId_item: org.apache.hive.service.rpc.thrift.THandleIdentifier, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(OperationIdField)
    writeOperationIdValue(operationId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeOperationIdValue(operationId_item: org.apache.hive.service.rpc.thrift.THandleIdentifier, _oprot: TProtocol): Unit = {
    operationId_item.write(_oprot)
  }

  @inline private[thrift] def readOperationTypeValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TOperationType = {
    org.apache.hive.service.rpc.thrift.TOperationType.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeOperationTypeField(operationType_item: org.apache.hive.service.rpc.thrift.TOperationType, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(OperationTypeFieldI32)
    writeOperationTypeValue(operationType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeOperationTypeValue(operationType_item: org.apache.hive.service.rpc.thrift.TOperationType, _oprot: TProtocol): Unit = {
    _oprot.writeI32(operationType_item.value)
  }

  @inline private[thrift] def readHasResultSetValue(_iprot: TProtocol): Boolean = {
    _iprot.readBool()
  }

  @inline private def writeHasResultSetField(hasResultSet_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(HasResultSetField)
    writeHasResultSetValue(hasResultSet_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeHasResultSetValue(hasResultSet_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeBool(hasResultSet_item)
  }

  @inline private[thrift] def readModifiedRowCountValue(_iprot: TProtocol): Double = {
    _iprot.readDouble()
  }

  @inline private def writeModifiedRowCountField(modifiedRowCount_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ModifiedRowCountField)
    writeModifiedRowCountValue(modifiedRowCount_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeModifiedRowCountValue(modifiedRowCount_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeDouble(modifiedRowCount_item)
  }


  object Immutable extends ThriftStructCodec3[TOperationHandle] {
    override def encode(_item: TOperationHandle, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TOperationHandle = TOperationHandle.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TOperationHandle] = TOperationHandle.metaData
  }

  /**
   * The default read-only implementation of TOperationHandle.  You typically should not need to
   * directly reference this class; instead, use the TOperationHandle.apply method to construct
   * new instances.
   */
  class Immutable(
      val operationId: org.apache.hive.service.rpc.thrift.THandleIdentifier,
      val operationType: org.apache.hive.service.rpc.thrift.TOperationType,
      val hasResultSet: Boolean,
      val modifiedRowCount: _root_.scala.Option[Double],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TOperationHandle {
    def this(
      operationId: org.apache.hive.service.rpc.thrift.THandleIdentifier,
      operationType: org.apache.hive.service.rpc.thrift.TOperationType,
      hasResultSet: Boolean,
      modifiedRowCount: _root_.scala.Option[Double] = _root_.scala.None
    ) = this(
      operationId,
      operationType,
      hasResultSet,
      modifiedRowCount,
      immutable$Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val operationId: org.apache.hive.service.rpc.thrift.THandleIdentifier,
      val operationType: org.apache.hive.service.rpc.thrift.TOperationType,
      val hasResultSet: Boolean,
      modifiedRowCountOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TOperationHandle {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val modifiedRowCount: _root_.scala.Option[Double] =
      if (modifiedRowCountOffset == -1)
        None
      else {
        Some(_proto.decodeDouble(_buf, modifiedRowCountOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TOperationHandle trait with additional state or
   * behavior and implement the read-only methods from TOperationHandle using an underlying
   * instance.
   */
  trait Proxy extends TOperationHandle {
    protected def _underlying_TOperationHandle: TOperationHandle
    override def operationId: org.apache.hive.service.rpc.thrift.THandleIdentifier = _underlying_TOperationHandle.operationId
    override def operationType: org.apache.hive.service.rpc.thrift.TOperationType = _underlying_TOperationHandle.operationType
    override def hasResultSet: Boolean = _underlying_TOperationHandle.hasResultSet
    override def modifiedRowCount: _root_.scala.Option[Double] = _underlying_TOperationHandle.modifiedRowCount
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TOperationHandle._passthroughFields
  }
}

/**
 * Prefer the companion object's [[org.apache.hive.service.rpc.thrift.TOperationHandle.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TOperationHandle
  extends ThriftStruct
  with _root_.scala.Product4[org.apache.hive.service.rpc.thrift.THandleIdentifier, org.apache.hive.service.rpc.thrift.TOperationType, Boolean, Option[Double]]
  with ValidatingThriftStruct[TOperationHandle]
  with java.io.Serializable
{
  import TOperationHandle._

  def operationId: org.apache.hive.service.rpc.thrift.THandleIdentifier
  def operationType: org.apache.hive.service.rpc.thrift.TOperationType
  def hasResultSet: Boolean
  def modifiedRowCount: _root_.scala.Option[Double]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: org.apache.hive.service.rpc.thrift.THandleIdentifier = operationId
  def _2: org.apache.hive.service.rpc.thrift.TOperationType = operationType
  def _3: Boolean = hasResultSet
  def _4: _root_.scala.Option[Double] = modifiedRowCount

  def toTuple: _root_.scala.Tuple4[org.apache.hive.service.rpc.thrift.THandleIdentifier, org.apache.hive.service.rpc.thrift.TOperationType, Boolean, Option[Double]] = {
    (
      operationId,
      operationType,
      hasResultSet,
      modifiedRowCount
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (operationId ne null) {
                writeOperationIdValue(operationId, _oprot)
                _root_.scala.Some(TOperationHandle.OperationIdField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (operationType ne null) {
                writeOperationTypeValue(operationType, _oprot)
                _root_.scala.Some(TOperationHandle.OperationTypeField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeHasResultSetValue(hasResultSet, _oprot)
                _root_.scala.Some(TOperationHandle.HasResultSetField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (modifiedRowCount.isDefined) {
                writeModifiedRowCountValue(modifiedRowCount.get, _oprot)
                _root_.scala.Some(TOperationHandle.ModifiedRowCountField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TOperationHandle = {
    var operationId: org.apache.hive.service.rpc.thrift.THandleIdentifier = this.operationId
    var operationType: org.apache.hive.service.rpc.thrift.TOperationType = this.operationType
    var hasResultSet: Boolean = this.hasResultSet
    var modifiedRowCount: _root_.scala.Option[Double] = this.modifiedRowCount
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        operationId = readOperationIdValue(_blob.read)
      case 2 =>
        operationType = readOperationTypeValue(_blob.read)
      case 3 =>
        hasResultSet = readHasResultSetValue(_blob.read)
      case 4 =>
        modifiedRowCount = _root_.scala.Some(readModifiedRowCountValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      operationId,
      operationType,
      hasResultSet,
      modifiedRowCount,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TOperationHandle = {
    var operationId: org.apache.hive.service.rpc.thrift.THandleIdentifier = this.operationId
    var operationType: org.apache.hive.service.rpc.thrift.TOperationType = this.operationType
    var hasResultSet: Boolean = this.hasResultSet
    var modifiedRowCount: _root_.scala.Option[Double] = this.modifiedRowCount

    _fieldId match {
      case 1 =>
        operationId = null
      case 2 =>
        operationType = null
      case 3 =>
        hasResultSet = false
      case 4 =>
        modifiedRowCount = _root_.scala.None
      case _ =>
    }
    new Immutable(
      operationId,
      operationType,
      hasResultSet,
      modifiedRowCount,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetOperationId: TOperationHandle = unsetField(1)

  def unsetOperationType: TOperationHandle = unsetField(2)

  def unsetHasResultSet: TOperationHandle = unsetField(3)

  def unsetModifiedRowCount: TOperationHandle = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    TOperationHandle.validate(this)
    _oprot.writeStructBegin(Struct)
    if (operationId ne null) writeOperationIdField(operationId, _oprot)
    if (operationType ne null) writeOperationTypeField(operationType, _oprot)
    writeHasResultSetField(hasResultSet, _oprot)
    if (modifiedRowCount.isDefined) writeModifiedRowCountField(modifiedRowCount.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    operationId: org.apache.hive.service.rpc.thrift.THandleIdentifier = this.operationId,
    operationType: org.apache.hive.service.rpc.thrift.TOperationType = this.operationType,
    hasResultSet: Boolean = this.hasResultSet,
    modifiedRowCount: _root_.scala.Option[Double] = this.modifiedRowCount,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TOperationHandle =
    new Immutable(
      operationId,
      operationType,
      hasResultSet,
      modifiedRowCount,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TOperationHandle]

  private def _equals(x: TOperationHandle, y: TOperationHandle): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TOperationHandle])

  override def hashCode: Int = {
    _root_.scala.runtime.ScalaRunTime._hashCode(this)
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.operationId
    case 1 => this.operationType
    case 2 => this.hasResultSet
    case 3 => this.modifiedRowCount
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TOperationHandle"

  def _codec: ValidatingThriftStructCodec3[TOperationHandle] = TOperationHandle

  def newBuilder(): StructBuilder[TOperationHandle] = new TOperationHandleStructBuilder(_root_.scala.Some(this), fieldTypes)
}

private[thrift] class TOperationHandleStructBuilder(instance: _root_.scala.Option[TOperationHandle], fieldTypes: IndexedSeq[ClassTag[_]])
    extends StructBuilder[TOperationHandle](fieldTypes) {

  def build(): TOperationHandle = instance match {
    case _root_.scala.Some(i) =>
      TOperationHandle(
        (if (fieldArray(0) == null) i.operationId else fieldArray(0)).asInstanceOf[org.apache.hive.service.rpc.thrift.THandleIdentifier],
        (if (fieldArray(1) == null) i.operationType else fieldArray(1)).asInstanceOf[org.apache.hive.service.rpc.thrift.TOperationType],
        (if (fieldArray(2) == null) i.hasResultSet else fieldArray(2)).asInstanceOf[Boolean],
        (if (fieldArray(3) == null) i.modifiedRowCount else fieldArray(3)).asInstanceOf[_root_.scala.Option[Double]]
      )
    case _root_.scala.None =>
      if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("TOperationHandle"))
      else {
        TOperationHandle(
          fieldArray(0).asInstanceOf[org.apache.hive.service.rpc.thrift.THandleIdentifier],
          fieldArray(1).asInstanceOf[org.apache.hive.service.rpc.thrift.TOperationType],
          fieldArray(2).asInstanceOf[Boolean],
          fieldArray(3).asInstanceOf[_root_.scala.Option[Double]]
        )
      }
    }
}

