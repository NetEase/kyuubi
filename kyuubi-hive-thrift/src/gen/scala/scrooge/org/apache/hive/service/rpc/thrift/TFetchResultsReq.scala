/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  InvalidFieldsException,
  LazyTProtocol,
  StructBuilder,
  StructBuilderFactory,
  TFieldBlob,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructField,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.reflect.{ClassTag, classTag}


object TFetchResultsReq extends ValidatingThriftStructCodec3[TFetchResultsReq] with StructBuilderFactory[TFetchResultsReq] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TFetchResultsReq")
  val OperationHandleField: TField = new TField("operationHandle", TType.STRUCT, 1)
  val OperationHandleFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TOperationHandle] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TOperationHandle]]
  val OrientationField: TField = new TField("orientation", TType.ENUM, 2)
  val OrientationFieldI32: TField = new TField("orientation", TType.I32, 2)
  val OrientationFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TFetchOrientation] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TFetchOrientation]]
  val MaxRowsField: TField = new TField("maxRows", TType.I64, 3)
  val MaxRowsFieldManifest: Manifest[Long] = implicitly[Manifest[Long]]
  val FetchTypeField: TField = new TField("fetchType", TType.I16, 4)
  val FetchTypeFieldManifest: Manifest[Short] = implicitly[Manifest[Short]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      OperationHandleField,
      false,
      true,
      OperationHandleFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      OrientationField,
      false,
      true,
      OrientationFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[org.apache.hive.service.rpc.thrift.TFetchOrientation](TFetchOrientation.FetchNext)
    ),
    new ThriftStructFieldInfo(
      MaxRowsField,
      false,
      true,
      MaxRowsFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      FetchTypeField,
      false,
      false,
      FetchTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[Short](0)
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
    classTag[org.apache.hive.service.rpc.thrift.TOperationHandle].asInstanceOf[ClassTag[_]],
    classTag[org.apache.hive.service.rpc.thrift.TFetchOrientation].asInstanceOf[ClassTag[_]],
    classTag[Long].asInstanceOf[ClassTag[_]],
    classTag[Short].asInstanceOf[ClassTag[_]]
  )

  private[this] val structFields: Seq[ThriftStructField[TFetchResultsReq]] = {
    Seq(
      new ThriftStructField[TFetchResultsReq](
        OperationHandleField,
        _root_.scala.Some(OperationHandleFieldManifest),
        classOf[TFetchResultsReq]) {
          def getValue[R](struct: TFetchResultsReq): R = struct.operationHandle.asInstanceOf[R]
      },
      new ThriftStructField[TFetchResultsReq](
        OrientationField,
        _root_.scala.Some(OrientationFieldManifest),
        classOf[TFetchResultsReq]) {
          def getValue[R](struct: TFetchResultsReq): R = struct.orientation.asInstanceOf[R]
      },
      new ThriftStructField[TFetchResultsReq](
        MaxRowsField,
        _root_.scala.Some(MaxRowsFieldManifest),
        classOf[TFetchResultsReq]) {
          def getValue[R](struct: TFetchResultsReq): R = struct.maxRows.asInstanceOf[R]
      },
      new ThriftStructField[TFetchResultsReq](
        FetchTypeField,
        _root_.scala.Some(FetchTypeFieldManifest),
        classOf[TFetchResultsReq]) {
          def getValue[R](struct: TFetchResultsReq): R = struct.fetchType.asInstanceOf[R]
      }
    )
  }

  override lazy val metaData: ThriftStructMetaData[TFetchResultsReq] =
    new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TFetchResultsReq): Unit = {
    if (_item.operationHandle == null) throw new TProtocolException("Required field operationHandle cannot be null")
    if (_item.orientation == null) throw new TProtocolException("Required field orientation cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TFetchResultsReq): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.operationHandle == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.operationHandle)
    if (item.orientation == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(1))
    buf ++= validateField(item.orientation)
    buf ++= validateField(item.maxRows)
    buf ++= validateField(item.fetchType)
    buf.toList
  }

  def withoutPassthroughFields(original: TFetchResultsReq): TFetchResultsReq =
    new Immutable(
      operationHandle =
        {
          val field = original.operationHandle
          org.apache.hive.service.rpc.thrift.TOperationHandle.withoutPassthroughFields(field)
        },
      orientation =
        {
          val field = original.orientation
          field
        },
      maxRows =
        {
          val field = original.maxRows
          field
        },
      fetchType =
        {
          val field = original.fetchType
          field
        }
    )

  def newBuilder(): StructBuilder[TFetchResultsReq] = new TFetchResultsReqStructBuilder(_root_.scala.None, fieldTypes)

  override def encode(_item: TFetchResultsReq, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TFetchResultsReq = {

    var operationHandle: org.apache.hive.service.rpc.thrift.TOperationHandle = null
    var _got_operationHandle = false
    var orientation: org.apache.hive.service.rpc.thrift.TFetchOrientation = TFetchOrientation.FetchNext
    var _got_orientation = false
    var maxRows: Long = 0L
    var _got_maxRows = false
    var fetchType: Short = 0

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                operationHandle = readOperationHandleValue(_iprot)
                _got_operationHandle = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'operationHandle' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
    
                orientation = readOrientationValue(_iprot)
                _got_orientation = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'orientation' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
    
                maxRows = readMaxRowsValue(_iprot)
                _got_maxRows = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'maxRows' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I16 =>
    
                fetchType = readFetchTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'fetchType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_operationHandle) throw new TProtocolException("Required field 'operationHandle' was not found in serialized data for struct TFetchResultsReq")
    if (!_got_orientation) throw new TProtocolException("Required field 'orientation' was not found in serialized data for struct TFetchResultsReq")
    if (!_got_maxRows) throw new TProtocolException("Required field 'maxRows' was not found in serialized data for struct TFetchResultsReq")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      operationHandle,
      orientation,
      maxRows,
      fetchType,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TFetchResultsReq =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TFetchResultsReq = {
    var operationHandle: org.apache.hive.service.rpc.thrift.TOperationHandle = null
    var _got_operationHandle = false
    var orientation: org.apache.hive.service.rpc.thrift.TFetchOrientation = TFetchOrientation.FetchNext
    var _got_orientation = false
    var maxRows: Long = 0L
    var _got_maxRows = false
    var fetchType: Short = 0
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
                operationHandle = readOperationHandleValue(_iprot)
                _got_operationHandle = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'operationHandle' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                orientation = readOrientationValue(_iprot)
                _got_orientation = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'orientation' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
                maxRows = readMaxRowsValue(_iprot)
                _got_maxRows = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'maxRows' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I16 =>
                fetchType = readFetchTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'fetchType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_operationHandle) throw new TProtocolException("Required field 'operationHandle' was not found in serialized data for struct TFetchResultsReq")
    if (!_got_orientation) throw new TProtocolException("Required field 'orientation' was not found in serialized data for struct TFetchResultsReq")
    if (!_got_maxRows) throw new TProtocolException("Required field 'maxRows' was not found in serialized data for struct TFetchResultsReq")
    new Immutable(
      operationHandle,
      orientation,
      maxRows,
      fetchType,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    operationHandle: org.apache.hive.service.rpc.thrift.TOperationHandle,
    orientation: org.apache.hive.service.rpc.thrift.TFetchOrientation = TFetchOrientation.FetchNext,
    maxRows: Long,
    fetchType: Short = 0
  ): TFetchResultsReq =
    new Immutable(
      operationHandle,
      orientation,
      maxRows,
      fetchType
    )

  def unapply(_item: TFetchResultsReq): _root_.scala.Option[_root_.scala.Tuple4[org.apache.hive.service.rpc.thrift.TOperationHandle, org.apache.hive.service.rpc.thrift.TFetchOrientation, Long, Short]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readOperationHandleValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TOperationHandle = {
    org.apache.hive.service.rpc.thrift.TOperationHandle.decode(_iprot)
  }

  @inline private def writeOperationHandleField(operationHandle_item: org.apache.hive.service.rpc.thrift.TOperationHandle, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(OperationHandleField)
    writeOperationHandleValue(operationHandle_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeOperationHandleValue(operationHandle_item: org.apache.hive.service.rpc.thrift.TOperationHandle, _oprot: TProtocol): Unit = {
    operationHandle_item.write(_oprot)
  }

  @inline private[thrift] def readOrientationValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TFetchOrientation = {
    org.apache.hive.service.rpc.thrift.TFetchOrientation.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeOrientationField(orientation_item: org.apache.hive.service.rpc.thrift.TFetchOrientation, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(OrientationFieldI32)
    writeOrientationValue(orientation_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeOrientationValue(orientation_item: org.apache.hive.service.rpc.thrift.TFetchOrientation, _oprot: TProtocol): Unit = {
    _oprot.writeI32(orientation_item.value)
  }

  @inline private[thrift] def readMaxRowsValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeMaxRowsField(maxRows_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MaxRowsField)
    writeMaxRowsValue(maxRows_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMaxRowsValue(maxRows_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(maxRows_item)
  }

  @inline private[thrift] def readFetchTypeValue(_iprot: TProtocol): Short = {
    _iprot.readI16()
  }

  @inline private def writeFetchTypeField(fetchType_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FetchTypeField)
    writeFetchTypeValue(fetchType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFetchTypeValue(fetchType_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeI16(fetchType_item)
  }


  object Immutable extends ThriftStructCodec3[TFetchResultsReq] {
    override def encode(_item: TFetchResultsReq, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TFetchResultsReq = TFetchResultsReq.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TFetchResultsReq] = TFetchResultsReq.metaData
  }

  /**
   * The default read-only implementation of TFetchResultsReq.  You typically should not need to
   * directly reference this class; instead, use the TFetchResultsReq.apply method to construct
   * new instances.
   */
  class Immutable(
      val operationHandle: org.apache.hive.service.rpc.thrift.TOperationHandle,
      val orientation: org.apache.hive.service.rpc.thrift.TFetchOrientation,
      val maxRows: Long,
      val fetchType: Short,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TFetchResultsReq {
    def this(
      operationHandle: org.apache.hive.service.rpc.thrift.TOperationHandle,
      orientation: org.apache.hive.service.rpc.thrift.TFetchOrientation = TFetchOrientation.FetchNext,
      maxRows: Long,
      fetchType: Short = 0
    ) = this(
      operationHandle,
      orientation,
      maxRows,
      fetchType,
      immutable$Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val operationHandle: org.apache.hive.service.rpc.thrift.TOperationHandle,
      val orientation: org.apache.hive.service.rpc.thrift.TFetchOrientation,
      val maxRows: Long,
      val fetchType: Short,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TFetchResultsReq {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TFetchResultsReq trait with additional state or
   * behavior and implement the read-only methods from TFetchResultsReq using an underlying
   * instance.
   */
  trait Proxy extends TFetchResultsReq {
    protected def _underlying_TFetchResultsReq: TFetchResultsReq
    override def operationHandle: org.apache.hive.service.rpc.thrift.TOperationHandle = _underlying_TFetchResultsReq.operationHandle
    override def orientation: org.apache.hive.service.rpc.thrift.TFetchOrientation = _underlying_TFetchResultsReq.orientation
    override def maxRows: Long = _underlying_TFetchResultsReq.maxRows
    override def fetchType: Short = _underlying_TFetchResultsReq.fetchType
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TFetchResultsReq._passthroughFields
  }
}

/**
 * Prefer the companion object's [[org.apache.hive.service.rpc.thrift.TFetchResultsReq.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TFetchResultsReq
  extends ThriftStruct
  with _root_.scala.Product4[org.apache.hive.service.rpc.thrift.TOperationHandle, org.apache.hive.service.rpc.thrift.TFetchOrientation, Long, Short]
  with ValidatingThriftStruct[TFetchResultsReq]
  with java.io.Serializable
{
  import TFetchResultsReq._

  def operationHandle: org.apache.hive.service.rpc.thrift.TOperationHandle
  def orientation: org.apache.hive.service.rpc.thrift.TFetchOrientation
  def maxRows: Long
  def fetchType: Short

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: org.apache.hive.service.rpc.thrift.TOperationHandle = operationHandle
  def _2: org.apache.hive.service.rpc.thrift.TFetchOrientation = orientation
  def _3: Long = maxRows
  def _4: Short = fetchType

  def toTuple: _root_.scala.Tuple4[org.apache.hive.service.rpc.thrift.TOperationHandle, org.apache.hive.service.rpc.thrift.TFetchOrientation, Long, Short] = {
    (
      operationHandle,
      orientation,
      maxRows,
      fetchType
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (operationHandle ne null) {
                writeOperationHandleValue(operationHandle, _oprot)
                _root_.scala.Some(TFetchResultsReq.OperationHandleField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (orientation ne null) {
                writeOrientationValue(orientation, _oprot)
                _root_.scala.Some(TFetchResultsReq.OrientationField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeMaxRowsValue(maxRows, _oprot)
                _root_.scala.Some(TFetchResultsReq.MaxRowsField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (true) {
                writeFetchTypeValue(fetchType, _oprot)
                _root_.scala.Some(TFetchResultsReq.FetchTypeField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TFetchResultsReq = {
    var operationHandle: org.apache.hive.service.rpc.thrift.TOperationHandle = this.operationHandle
    var orientation: org.apache.hive.service.rpc.thrift.TFetchOrientation = this.orientation
    var maxRows: Long = this.maxRows
    var fetchType: Short = this.fetchType
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        operationHandle = readOperationHandleValue(_blob.read)
      case 2 =>
        orientation = readOrientationValue(_blob.read)
      case 3 =>
        maxRows = readMaxRowsValue(_blob.read)
      case 4 =>
        fetchType = readFetchTypeValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      operationHandle,
      orientation,
      maxRows,
      fetchType,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TFetchResultsReq = {
    var operationHandle: org.apache.hive.service.rpc.thrift.TOperationHandle = this.operationHandle
    var orientation: org.apache.hive.service.rpc.thrift.TFetchOrientation = this.orientation
    var maxRows: Long = this.maxRows
    var fetchType: Short = this.fetchType

    _fieldId match {
      case 1 =>
        operationHandle = null
      case 2 =>
        orientation = TFetchOrientation.FetchNext
      case 3 =>
        maxRows = 0L
      case 4 =>
        fetchType = 0
      case _ =>
    }
    new Immutable(
      operationHandle,
      orientation,
      maxRows,
      fetchType,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetOperationHandle: TFetchResultsReq = unsetField(1)

  def unsetOrientation: TFetchResultsReq = unsetField(2)

  def unsetMaxRows: TFetchResultsReq = unsetField(3)

  def unsetFetchType: TFetchResultsReq = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    TFetchResultsReq.validate(this)
    _oprot.writeStructBegin(Struct)
    if (operationHandle ne null) writeOperationHandleField(operationHandle, _oprot)
    if (orientation ne null) writeOrientationField(orientation, _oprot)
    writeMaxRowsField(maxRows, _oprot)
    writeFetchTypeField(fetchType, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    operationHandle: org.apache.hive.service.rpc.thrift.TOperationHandle = this.operationHandle,
    orientation: org.apache.hive.service.rpc.thrift.TFetchOrientation = this.orientation,
    maxRows: Long = this.maxRows,
    fetchType: Short = this.fetchType,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TFetchResultsReq =
    new Immutable(
      operationHandle,
      orientation,
      maxRows,
      fetchType,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TFetchResultsReq]

  private def _equals(x: TFetchResultsReq, y: TFetchResultsReq): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TFetchResultsReq])

  override def hashCode: Int = {
    _root_.scala.runtime.ScalaRunTime._hashCode(this)
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.operationHandle
    case 1 => this.orientation
    case 2 => this.maxRows
    case 3 => this.fetchType
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TFetchResultsReq"

  def _codec: ValidatingThriftStructCodec3[TFetchResultsReq] = TFetchResultsReq

  def newBuilder(): StructBuilder[TFetchResultsReq] = new TFetchResultsReqStructBuilder(_root_.scala.Some(this), fieldTypes)
}

private[thrift] class TFetchResultsReqStructBuilder(instance: _root_.scala.Option[TFetchResultsReq], fieldTypes: IndexedSeq[ClassTag[_]])
    extends StructBuilder[TFetchResultsReq](fieldTypes) {

  def build(): TFetchResultsReq = instance match {
    case _root_.scala.Some(i) =>
      TFetchResultsReq(
        (if (fieldArray(0) == null) i.operationHandle else fieldArray(0)).asInstanceOf[org.apache.hive.service.rpc.thrift.TOperationHandle],
        (if (fieldArray(1) == null) i.orientation else fieldArray(1)).asInstanceOf[org.apache.hive.service.rpc.thrift.TFetchOrientation],
        (if (fieldArray(2) == null) i.maxRows else fieldArray(2)).asInstanceOf[Long],
        (if (fieldArray(3) == null) i.fetchType else fieldArray(3)).asInstanceOf[Short]
      )
    case _root_.scala.None =>
      if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("TFetchResultsReq"))
      else {
        TFetchResultsReq(
          fieldArray(0).asInstanceOf[org.apache.hive.service.rpc.thrift.TOperationHandle],
          fieldArray(1).asInstanceOf[org.apache.hive.service.rpc.thrift.TFetchOrientation],
          fieldArray(2).asInstanceOf[Long],
          fieldArray(3).asInstanceOf[Short]
        )
      }
    }
}

