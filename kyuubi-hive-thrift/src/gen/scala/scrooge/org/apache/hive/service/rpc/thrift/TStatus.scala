/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  InvalidFieldsException,
  LazyTProtocol,
  StructBuilder,
  StructBuilderFactory,
  TFieldBlob,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructField,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.reflect.{ClassTag, classTag}


object TStatus extends ValidatingThriftStructCodec3[TStatus] with StructBuilderFactory[TStatus] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TStatus")
  val StatusCodeField: TField = new TField("statusCode", TType.ENUM, 1)
  val StatusCodeFieldI32: TField = new TField("statusCode", TType.I32, 1)
  val StatusCodeFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TStatusCode] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TStatusCode]]
  val InfoMessagesField: TField = new TField("infoMessages", TType.LIST, 2)
  val InfoMessagesFieldManifest: Manifest[_root_.scala.collection.Seq[String]] = implicitly[Manifest[_root_.scala.collection.Seq[String]]]
  val SqlStateField: TField = new TField("sqlState", TType.STRING, 3)
  val SqlStateFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val ErrorCodeField: TField = new TField("errorCode", TType.I32, 4)
  val ErrorCodeFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val ErrorMessageField: TField = new TField("errorMessage", TType.STRING, 5)
  val ErrorMessageFieldManifest: Manifest[String] = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      StatusCodeField,
      false,
      true,
      StatusCodeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      InfoMessagesField,
      true,
      false,
      InfoMessagesFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SqlStateField,
      true,
      false,
      SqlStateFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ErrorCodeField,
      true,
      false,
      ErrorCodeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ErrorMessageField,
      true,
      false,
      ErrorMessageFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
    classTag[org.apache.hive.service.rpc.thrift.TStatusCode].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[_root_.scala.collection.Seq[String]]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[Int]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]]
  )

  private[this] val structFields: Seq[ThriftStructField[TStatus]] = {
    Seq(
      new ThriftStructField[TStatus](
        StatusCodeField,
        _root_.scala.Some(StatusCodeFieldManifest),
        classOf[TStatus]) {
          def getValue[R](struct: TStatus): R = struct.statusCode.asInstanceOf[R]
      },
      new ThriftStructField[TStatus](
        InfoMessagesField,
        _root_.scala.Some(InfoMessagesFieldManifest),
        classOf[TStatus]) {
          def getValue[R](struct: TStatus): R = struct.infoMessages.asInstanceOf[R]
      },
      new ThriftStructField[TStatus](
        SqlStateField,
        _root_.scala.Some(SqlStateFieldManifest),
        classOf[TStatus]) {
          def getValue[R](struct: TStatus): R = struct.sqlState.asInstanceOf[R]
      },
      new ThriftStructField[TStatus](
        ErrorCodeField,
        _root_.scala.Some(ErrorCodeFieldManifest),
        classOf[TStatus]) {
          def getValue[R](struct: TStatus): R = struct.errorCode.asInstanceOf[R]
      },
      new ThriftStructField[TStatus](
        ErrorMessageField,
        _root_.scala.Some(ErrorMessageFieldManifest),
        classOf[TStatus]) {
          def getValue[R](struct: TStatus): R = struct.errorMessage.asInstanceOf[R]
      }
    )
  }

  override lazy val metaData: ThriftStructMetaData[TStatus] =
    new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TStatus): Unit = {
    if (_item.statusCode == null) throw new TProtocolException("Required field statusCode cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TStatus): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.statusCode == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.statusCode)
    buf ++= validateField(item.infoMessages)
    buf ++= validateField(item.sqlState)
    buf ++= validateField(item.errorCode)
    buf ++= validateField(item.errorMessage)
    buf.toList
  }

  def withoutPassthroughFields(original: TStatus): TStatus =
    new Immutable(
      statusCode =
        {
          val field = original.statusCode
          field
        },
      infoMessages =
        {
          val field = original.infoMessages
          field.map { field =>
            field.map { field =>
              field
            }
          }
        },
      sqlState =
        {
          val field = original.sqlState
          field.map { field =>
            field
          }
        },
      errorCode =
        {
          val field = original.errorCode
          field.map { field =>
            field
          }
        },
      errorMessage =
        {
          val field = original.errorMessage
          field.map { field =>
            field
          }
        }
    )

  def newBuilder(): StructBuilder[TStatus] = new TStatusStructBuilder(_root_.scala.None, fieldTypes)

  override def encode(_item: TStatus, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TStatus = {

    var statusCode: org.apache.hive.service.rpc.thrift.TStatusCode = null
    var _got_statusCode = false
    var infoMessages: Option[_root_.scala.collection.Seq[String]] = None
    var sqlStateOffset: Int = -1
    var errorCodeOffset: Int = -1
    var errorMessageOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
    
                statusCode = readStatusCodeValue(_iprot)
                _got_statusCode = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'statusCode' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
    
                infoMessages = Some(readInfoMessagesValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'infoMessages' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                sqlStateOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'sqlState' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
                errorCodeOffset = _iprot.offsetSkipI32
    
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'errorCode' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                errorMessageOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'errorMessage' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_statusCode) throw new TProtocolException("Required field 'statusCode' was not found in serialized data for struct TStatus")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      statusCode,
      infoMessages,
      sqlStateOffset,
      errorCodeOffset,
      errorMessageOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TStatus =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TStatus = {
    var statusCode: org.apache.hive.service.rpc.thrift.TStatusCode = null
    var _got_statusCode = false
    var infoMessages: _root_.scala.Option[_root_.scala.collection.Seq[String]] = _root_.scala.None
    var sqlState: _root_.scala.Option[String] = _root_.scala.None
    var errorCode: _root_.scala.Option[Int] = _root_.scala.None
    var errorMessage: _root_.scala.Option[String] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                statusCode = readStatusCodeValue(_iprot)
                _got_statusCode = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'statusCode' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
                infoMessages = _root_.scala.Some(readInfoMessagesValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'infoMessages' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                sqlState = _root_.scala.Some(readSqlStateValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'sqlState' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
                errorCode = _root_.scala.Some(readErrorCodeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'errorCode' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                errorMessage = _root_.scala.Some(readErrorMessageValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'errorMessage' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_statusCode) throw new TProtocolException("Required field 'statusCode' was not found in serialized data for struct TStatus")
    new Immutable(
      statusCode,
      infoMessages,
      sqlState,
      errorCode,
      errorMessage,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    statusCode: org.apache.hive.service.rpc.thrift.TStatusCode,
    infoMessages: _root_.scala.Option[_root_.scala.collection.Seq[String]] = _root_.scala.None,
    sqlState: _root_.scala.Option[String] = _root_.scala.None,
    errorCode: _root_.scala.Option[Int] = _root_.scala.None,
    errorMessage: _root_.scala.Option[String] = _root_.scala.None
  ): TStatus =
    new Immutable(
      statusCode,
      infoMessages,
      sqlState,
      errorCode,
      errorMessage
    )

  def unapply(_item: TStatus): _root_.scala.Option[_root_.scala.Tuple5[org.apache.hive.service.rpc.thrift.TStatusCode, Option[_root_.scala.collection.Seq[String]], Option[String], Option[Int], Option[String]]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readStatusCodeValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TStatusCode = {
    org.apache.hive.service.rpc.thrift.TStatusCode.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeStatusCodeField(statusCode_item: org.apache.hive.service.rpc.thrift.TStatusCode, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(StatusCodeFieldI32)
    writeStatusCodeValue(statusCode_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeStatusCodeValue(statusCode_item: org.apache.hive.service.rpc.thrift.TStatusCode, _oprot: TProtocol): Unit = {
    _oprot.writeI32(statusCode_item.value)
  }

  @inline private[thrift] def readInfoMessagesValue(_iprot: TProtocol): _root_.scala.collection.Seq[String] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new _root_.scala.collection.mutable.ArrayBuffer[String](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          _iprot.readString()
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeInfoMessagesField(infoMessages_item: _root_.scala.collection.Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(InfoMessagesField)
    writeInfoMessagesValue(infoMessages_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeInfoMessagesValue(infoMessages_item: _root_.scala.collection.Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRING, infoMessages_item.size))
    infoMessages_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = infoMessages_item.size
        while (_i < _size) {
          val infoMessages_item_element = infoMessages_item(_i)
          _oprot.writeString(infoMessages_item_element)
          _i += 1
        }
      case _ =>
        infoMessages_item.foreach { infoMessages_item_element =>
          _oprot.writeString(infoMessages_item_element)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[thrift] def readSqlStateValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeSqlStateField(sqlState_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SqlStateField)
    writeSqlStateValue(sqlState_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSqlStateValue(sqlState_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(sqlState_item)
  }

  @inline private[thrift] def readErrorCodeValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeErrorCodeField(errorCode_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ErrorCodeField)
    writeErrorCodeValue(errorCode_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeErrorCodeValue(errorCode_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(errorCode_item)
  }

  @inline private[thrift] def readErrorMessageValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeErrorMessageField(errorMessage_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ErrorMessageField)
    writeErrorMessageValue(errorMessage_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeErrorMessageValue(errorMessage_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(errorMessage_item)
  }


  object Immutable extends ThriftStructCodec3[TStatus] {
    override def encode(_item: TStatus, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TStatus = TStatus.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TStatus] = TStatus.metaData
  }

  /**
   * The default read-only implementation of TStatus.  You typically should not need to
   * directly reference this class; instead, use the TStatus.apply method to construct
   * new instances.
   */
  class Immutable(
      val statusCode: org.apache.hive.service.rpc.thrift.TStatusCode,
      val infoMessages: _root_.scala.Option[_root_.scala.collection.Seq[String]],
      val sqlState: _root_.scala.Option[String],
      val errorCode: _root_.scala.Option[Int],
      val errorMessage: _root_.scala.Option[String],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TStatus {
    def this(
      statusCode: org.apache.hive.service.rpc.thrift.TStatusCode,
      infoMessages: _root_.scala.Option[_root_.scala.collection.Seq[String]] = _root_.scala.None,
      sqlState: _root_.scala.Option[String] = _root_.scala.None,
      errorCode: _root_.scala.Option[Int] = _root_.scala.None,
      errorMessage: _root_.scala.Option[String] = _root_.scala.None
    ) = this(
      statusCode,
      infoMessages,
      sqlState,
      errorCode,
      errorMessage,
      immutable$Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val statusCode: org.apache.hive.service.rpc.thrift.TStatusCode,
      val infoMessages: _root_.scala.Option[_root_.scala.collection.Seq[String]],
      sqlStateOffset: Int,
      errorCodeOffset: Int,
      errorMessageOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TStatus {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val sqlState: _root_.scala.Option[String] =
      if (sqlStateOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, sqlStateOffset))
      }
    lazy val errorCode: _root_.scala.Option[Int] =
      if (errorCodeOffset == -1)
        None
      else {
        Some(_proto.decodeI32(_buf, errorCodeOffset))
      }
    lazy val errorMessage: _root_.scala.Option[String] =
      if (errorMessageOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, errorMessageOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TStatus trait with additional state or
   * behavior and implement the read-only methods from TStatus using an underlying
   * instance.
   */
  trait Proxy extends TStatus {
    protected def _underlying_TStatus: TStatus
    override def statusCode: org.apache.hive.service.rpc.thrift.TStatusCode = _underlying_TStatus.statusCode
    override def infoMessages: _root_.scala.Option[_root_.scala.collection.Seq[String]] = _underlying_TStatus.infoMessages
    override def sqlState: _root_.scala.Option[String] = _underlying_TStatus.sqlState
    override def errorCode: _root_.scala.Option[Int] = _underlying_TStatus.errorCode
    override def errorMessage: _root_.scala.Option[String] = _underlying_TStatus.errorMessage
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TStatus._passthroughFields
  }
}

/**
 * Prefer the companion object's [[org.apache.hive.service.rpc.thrift.TStatus.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TStatus
  extends ThriftStruct
  with _root_.scala.Product5[org.apache.hive.service.rpc.thrift.TStatusCode, Option[_root_.scala.collection.Seq[String]], Option[String], Option[Int], Option[String]]
  with ValidatingThriftStruct[TStatus]
  with java.io.Serializable
{
  import TStatus._

  def statusCode: org.apache.hive.service.rpc.thrift.TStatusCode
  def infoMessages: _root_.scala.Option[_root_.scala.collection.Seq[String]]
  def sqlState: _root_.scala.Option[String]
  def errorCode: _root_.scala.Option[Int]
  def errorMessage: _root_.scala.Option[String]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: org.apache.hive.service.rpc.thrift.TStatusCode = statusCode
  def _2: _root_.scala.Option[_root_.scala.collection.Seq[String]] = infoMessages
  def _3: _root_.scala.Option[String] = sqlState
  def _4: _root_.scala.Option[Int] = errorCode
  def _5: _root_.scala.Option[String] = errorMessage

  def toTuple: _root_.scala.Tuple5[org.apache.hive.service.rpc.thrift.TStatusCode, Option[_root_.scala.collection.Seq[String]], Option[String], Option[Int], Option[String]] = {
    (
      statusCode,
      infoMessages,
      sqlState,
      errorCode,
      errorMessage
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (statusCode ne null) {
                writeStatusCodeValue(statusCode, _oprot)
                _root_.scala.Some(TStatus.StatusCodeField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (infoMessages.isDefined) {
                writeInfoMessagesValue(infoMessages.get, _oprot)
                _root_.scala.Some(TStatus.InfoMessagesField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (sqlState.isDefined) {
                writeSqlStateValue(sqlState.get, _oprot)
                _root_.scala.Some(TStatus.SqlStateField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (errorCode.isDefined) {
                writeErrorCodeValue(errorCode.get, _oprot)
                _root_.scala.Some(TStatus.ErrorCodeField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (errorMessage.isDefined) {
                writeErrorMessageValue(errorMessage.get, _oprot)
                _root_.scala.Some(TStatus.ErrorMessageField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TStatus = {
    var statusCode: org.apache.hive.service.rpc.thrift.TStatusCode = this.statusCode
    var infoMessages: _root_.scala.Option[_root_.scala.collection.Seq[String]] = this.infoMessages
    var sqlState: _root_.scala.Option[String] = this.sqlState
    var errorCode: _root_.scala.Option[Int] = this.errorCode
    var errorMessage: _root_.scala.Option[String] = this.errorMessage
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        statusCode = readStatusCodeValue(_blob.read)
      case 2 =>
        infoMessages = _root_.scala.Some(readInfoMessagesValue(_blob.read))
      case 3 =>
        sqlState = _root_.scala.Some(readSqlStateValue(_blob.read))
      case 4 =>
        errorCode = _root_.scala.Some(readErrorCodeValue(_blob.read))
      case 5 =>
        errorMessage = _root_.scala.Some(readErrorMessageValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      statusCode,
      infoMessages,
      sqlState,
      errorCode,
      errorMessage,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TStatus = {
    var statusCode: org.apache.hive.service.rpc.thrift.TStatusCode = this.statusCode
    var infoMessages: _root_.scala.Option[_root_.scala.collection.Seq[String]] = this.infoMessages
    var sqlState: _root_.scala.Option[String] = this.sqlState
    var errorCode: _root_.scala.Option[Int] = this.errorCode
    var errorMessage: _root_.scala.Option[String] = this.errorMessage

    _fieldId match {
      case 1 =>
        statusCode = null
      case 2 =>
        infoMessages = _root_.scala.None
      case 3 =>
        sqlState = _root_.scala.None
      case 4 =>
        errorCode = _root_.scala.None
      case 5 =>
        errorMessage = _root_.scala.None
      case _ =>
    }
    new Immutable(
      statusCode,
      infoMessages,
      sqlState,
      errorCode,
      errorMessage,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetStatusCode: TStatus = unsetField(1)

  def unsetInfoMessages: TStatus = unsetField(2)

  def unsetSqlState: TStatus = unsetField(3)

  def unsetErrorCode: TStatus = unsetField(4)

  def unsetErrorMessage: TStatus = unsetField(5)


  override def write(_oprot: TProtocol): Unit = {
    TStatus.validate(this)
    _oprot.writeStructBegin(Struct)
    if (statusCode ne null) writeStatusCodeField(statusCode, _oprot)
    if (infoMessages.isDefined) writeInfoMessagesField(infoMessages.get, _oprot)
    if (sqlState.isDefined) writeSqlStateField(sqlState.get, _oprot)
    if (errorCode.isDefined) writeErrorCodeField(errorCode.get, _oprot)
    if (errorMessage.isDefined) writeErrorMessageField(errorMessage.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    statusCode: org.apache.hive.service.rpc.thrift.TStatusCode = this.statusCode,
    infoMessages: _root_.scala.Option[_root_.scala.collection.Seq[String]] = this.infoMessages,
    sqlState: _root_.scala.Option[String] = this.sqlState,
    errorCode: _root_.scala.Option[Int] = this.errorCode,
    errorMessage: _root_.scala.Option[String] = this.errorMessage,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TStatus =
    new Immutable(
      statusCode,
      infoMessages,
      sqlState,
      errorCode,
      errorMessage,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TStatus]

  private def _equals(x: TStatus, y: TStatus): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TStatus])

  override def hashCode: Int = {
    _root_.scala.runtime.ScalaRunTime._hashCode(this)
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 5

  override def productElement(n: Int): Any = n match {
    case 0 => this.statusCode
    case 1 => this.infoMessages
    case 2 => this.sqlState
    case 3 => this.errorCode
    case 4 => this.errorMessage
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TStatus"

  def _codec: ValidatingThriftStructCodec3[TStatus] = TStatus

  def newBuilder(): StructBuilder[TStatus] = new TStatusStructBuilder(_root_.scala.Some(this), fieldTypes)
}

private[thrift] class TStatusStructBuilder(instance: _root_.scala.Option[TStatus], fieldTypes: IndexedSeq[ClassTag[_]])
    extends StructBuilder[TStatus](fieldTypes) {

  def build(): TStatus = instance match {
    case _root_.scala.Some(i) =>
      TStatus(
        (if (fieldArray(0) == null) i.statusCode else fieldArray(0)).asInstanceOf[org.apache.hive.service.rpc.thrift.TStatusCode],
        (if (fieldArray(1) == null) i.infoMessages else fieldArray(1)).asInstanceOf[_root_.scala.Option[_root_.scala.collection.Seq[String]]],
        (if (fieldArray(2) == null) i.sqlState else fieldArray(2)).asInstanceOf[_root_.scala.Option[String]],
        (if (fieldArray(3) == null) i.errorCode else fieldArray(3)).asInstanceOf[_root_.scala.Option[Int]],
        (if (fieldArray(4) == null) i.errorMessage else fieldArray(4)).asInstanceOf[_root_.scala.Option[String]]
      )
    case _root_.scala.None =>
      if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("TStatus"))
      else {
        TStatus(
          fieldArray(0).asInstanceOf[org.apache.hive.service.rpc.thrift.TStatusCode],
          fieldArray(1).asInstanceOf[_root_.scala.Option[_root_.scala.collection.Seq[String]]],
          fieldArray(2).asInstanceOf[_root_.scala.Option[String]],
          fieldArray(3).asInstanceOf[_root_.scala.Option[Int]],
          fieldArray(4).asInstanceOf[_root_.scala.Option[String]]
        )
      }
    }
}

