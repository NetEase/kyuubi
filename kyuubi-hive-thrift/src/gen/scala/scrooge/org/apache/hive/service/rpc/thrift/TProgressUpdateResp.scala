/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  InvalidFieldsException,
  LazyTProtocol,
  StructBuilder,
  StructBuilderFactory,
  TFieldBlob,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructField,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.reflect.{ClassTag, classTag}


object TProgressUpdateResp extends ValidatingThriftStructCodec3[TProgressUpdateResp] with StructBuilderFactory[TProgressUpdateResp] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TProgressUpdateResp")
  val HeaderNamesField: TField = new TField("headerNames", TType.LIST, 1)
  val HeaderNamesFieldManifest: Manifest[_root_.scala.collection.Seq[String]] = implicitly[Manifest[_root_.scala.collection.Seq[String]]]
  val RowsField: TField = new TField("rows", TType.LIST, 2)
  val RowsFieldManifest: Manifest[_root_.scala.collection.Seq[_root_.scala.collection.Seq[String]]] = implicitly[Manifest[_root_.scala.collection.Seq[_root_.scala.collection.Seq[String]]]]
  val ProgressedPercentageField: TField = new TField("progressedPercentage", TType.DOUBLE, 3)
  val ProgressedPercentageFieldManifest: Manifest[Double] = implicitly[Manifest[Double]]
  val StatusField: TField = new TField("status", TType.ENUM, 4)
  val StatusFieldI32: TField = new TField("status", TType.I32, 4)
  val StatusFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TJobExecutionStatus] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TJobExecutionStatus]]
  val FooterSummaryField: TField = new TField("footerSummary", TType.STRING, 5)
  val FooterSummaryFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val StartTimeField: TField = new TField("startTime", TType.I64, 6)
  val StartTimeFieldManifest: Manifest[Long] = implicitly[Manifest[Long]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      HeaderNamesField,
      false,
      true,
      HeaderNamesFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      RowsField,
      false,
      true,
      RowsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[_root_.scala.collection.Seq[String]]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ProgressedPercentageField,
      false,
      true,
      ProgressedPercentageFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      StatusField,
      false,
      true,
      StatusFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      FooterSummaryField,
      false,
      true,
      FooterSummaryFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      StartTimeField,
      false,
      true,
      StartTimeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
    classTag[_root_.scala.collection.Seq[String]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.collection.Seq[_root_.scala.collection.Seq[String]]].asInstanceOf[ClassTag[_]],
    classTag[Double].asInstanceOf[ClassTag[_]],
    classTag[org.apache.hive.service.rpc.thrift.TJobExecutionStatus].asInstanceOf[ClassTag[_]],
    classTag[String].asInstanceOf[ClassTag[_]],
    classTag[Long].asInstanceOf[ClassTag[_]]
  )

  private[this] val structFields: Seq[ThriftStructField[TProgressUpdateResp]] = {
    Seq(
      new ThriftStructField[TProgressUpdateResp](
        HeaderNamesField,
        _root_.scala.Some(HeaderNamesFieldManifest),
        classOf[TProgressUpdateResp]) {
          def getValue[R](struct: TProgressUpdateResp): R = struct.headerNames.asInstanceOf[R]
      },
      new ThriftStructField[TProgressUpdateResp](
        RowsField,
        _root_.scala.Some(RowsFieldManifest),
        classOf[TProgressUpdateResp]) {
          def getValue[R](struct: TProgressUpdateResp): R = struct.rows.asInstanceOf[R]
      },
      new ThriftStructField[TProgressUpdateResp](
        ProgressedPercentageField,
        _root_.scala.Some(ProgressedPercentageFieldManifest),
        classOf[TProgressUpdateResp]) {
          def getValue[R](struct: TProgressUpdateResp): R = struct.progressedPercentage.asInstanceOf[R]
      },
      new ThriftStructField[TProgressUpdateResp](
        StatusField,
        _root_.scala.Some(StatusFieldManifest),
        classOf[TProgressUpdateResp]) {
          def getValue[R](struct: TProgressUpdateResp): R = struct.status.asInstanceOf[R]
      },
      new ThriftStructField[TProgressUpdateResp](
        FooterSummaryField,
        _root_.scala.Some(FooterSummaryFieldManifest),
        classOf[TProgressUpdateResp]) {
          def getValue[R](struct: TProgressUpdateResp): R = struct.footerSummary.asInstanceOf[R]
      },
      new ThriftStructField[TProgressUpdateResp](
        StartTimeField,
        _root_.scala.Some(StartTimeFieldManifest),
        classOf[TProgressUpdateResp]) {
          def getValue[R](struct: TProgressUpdateResp): R = struct.startTime.asInstanceOf[R]
      }
    )
  }

  override lazy val metaData: ThriftStructMetaData[TProgressUpdateResp] =
    new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TProgressUpdateResp): Unit = {
    if (_item.headerNames == null) throw new TProtocolException("Required field headerNames cannot be null")
    if (_item.rows == null) throw new TProtocolException("Required field rows cannot be null")
    if (_item.status == null) throw new TProtocolException("Required field status cannot be null")
    if (_item.footerSummary == null) throw new TProtocolException("Required field footerSummary cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TProgressUpdateResp): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.headerNames == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.headerNames)
    if (item.rows == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(1))
    buf ++= validateField(item.rows)
    buf ++= validateField(item.progressedPercentage)
    if (item.status == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(3))
    buf ++= validateField(item.status)
    if (item.footerSummary == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(4))
    buf ++= validateField(item.footerSummary)
    buf ++= validateField(item.startTime)
    buf.toList
  }

  def withoutPassthroughFields(original: TProgressUpdateResp): TProgressUpdateResp =
    new Immutable(
      headerNames =
        {
          val field = original.headerNames
          field.map { field =>
            field
          }
        },
      rows =
        {
          val field = original.rows
          field.map { field =>
            field.map { field =>
              field
            }
          }
        },
      progressedPercentage =
        {
          val field = original.progressedPercentage
          field
        },
      status =
        {
          val field = original.status
          field
        },
      footerSummary =
        {
          val field = original.footerSummary
          field
        },
      startTime =
        {
          val field = original.startTime
          field
        }
    )

  def newBuilder(): StructBuilder[TProgressUpdateResp] = new TProgressUpdateRespStructBuilder(_root_.scala.None, fieldTypes)

  override def encode(_item: TProgressUpdateResp, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TProgressUpdateResp = {

    var headerNames: _root_.scala.collection.Seq[String] = _root_.scala.collection.immutable.Nil
    var _got_headerNames = false
    var rows: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]] = _root_.scala.collection.immutable.Nil
    var _got_rows = false
    var progressedPercentage: Double = 0.0
    var _got_progressedPercentage = false
    var status: org.apache.hive.service.rpc.thrift.TJobExecutionStatus = null
    var _got_status = false
    var footerSummaryOffset: Int = -1
    var _got_footerSummary = false
    var startTime: Long = 0L
    var _got_startTime = false

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.LIST =>
    
                headerNames = readHeaderNamesValue(_iprot)
                _got_headerNames = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'headerNames' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
    
                rows = readRowsValue(_iprot)
                _got_rows = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'rows' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.DOUBLE =>
    
                progressedPercentage = readProgressedPercentageValue(_iprot)
                _got_progressedPercentage = true
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'progressedPercentage' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
    
                status = readStatusValue(_iprot)
                _got_status = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'status' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                footerSummaryOffset = _iprot.offsetSkipString
    
                _got_footerSummary = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'footerSummary' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I64 =>
    
                startTime = readStartTimeValue(_iprot)
                _got_startTime = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'startTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_headerNames) throw new TProtocolException("Required field 'headerNames' was not found in serialized data for struct TProgressUpdateResp")
    if (!_got_rows) throw new TProtocolException("Required field 'rows' was not found in serialized data for struct TProgressUpdateResp")
    if (!_got_progressedPercentage) throw new TProtocolException("Required field 'progressedPercentage' was not found in serialized data for struct TProgressUpdateResp")
    if (!_got_status) throw new TProtocolException("Required field 'status' was not found in serialized data for struct TProgressUpdateResp")
    if (!_got_footerSummary) throw new TProtocolException("Required field 'footerSummary' was not found in serialized data for struct TProgressUpdateResp")
    if (!_got_startTime) throw new TProtocolException("Required field 'startTime' was not found in serialized data for struct TProgressUpdateResp")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      headerNames,
      rows,
      progressedPercentage,
      status,
      footerSummaryOffset,
      startTime,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TProgressUpdateResp =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TProgressUpdateResp = {
    var headerNames: _root_.scala.collection.Seq[String] = _root_.scala.collection.immutable.Nil
    var _got_headerNames = false
    var rows: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]] = _root_.scala.collection.immutable.Nil
    var _got_rows = false
    var progressedPercentage: Double = 0.0
    var _got_progressedPercentage = false
    var status: org.apache.hive.service.rpc.thrift.TJobExecutionStatus = null
    var _got_status = false
    var footerSummary: String = null
    var _got_footerSummary = false
    var startTime: Long = 0L
    var _got_startTime = false
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.LIST =>
                headerNames = readHeaderNamesValue(_iprot)
                _got_headerNames = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'headerNames' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
                rows = readRowsValue(_iprot)
                _got_rows = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'rows' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.DOUBLE =>
                progressedPercentage = readProgressedPercentageValue(_iprot)
                _got_progressedPercentage = true
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'progressedPercentage' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                status = readStatusValue(_iprot)
                _got_status = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'status' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                footerSummary = readFooterSummaryValue(_iprot)
                _got_footerSummary = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'footerSummary' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I64 =>
                startTime = readStartTimeValue(_iprot)
                _got_startTime = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'startTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_headerNames) throw new TProtocolException("Required field 'headerNames' was not found in serialized data for struct TProgressUpdateResp")
    if (!_got_rows) throw new TProtocolException("Required field 'rows' was not found in serialized data for struct TProgressUpdateResp")
    if (!_got_progressedPercentage) throw new TProtocolException("Required field 'progressedPercentage' was not found in serialized data for struct TProgressUpdateResp")
    if (!_got_status) throw new TProtocolException("Required field 'status' was not found in serialized data for struct TProgressUpdateResp")
    if (!_got_footerSummary) throw new TProtocolException("Required field 'footerSummary' was not found in serialized data for struct TProgressUpdateResp")
    if (!_got_startTime) throw new TProtocolException("Required field 'startTime' was not found in serialized data for struct TProgressUpdateResp")
    new Immutable(
      headerNames,
      rows,
      progressedPercentage,
      status,
      footerSummary,
      startTime,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    headerNames: _root_.scala.collection.Seq[String] = _root_.scala.collection.immutable.Nil,
    rows: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]] = _root_.scala.collection.immutable.Nil,
    progressedPercentage: Double,
    status: org.apache.hive.service.rpc.thrift.TJobExecutionStatus,
    footerSummary: String,
    startTime: Long
  ): TProgressUpdateResp =
    new Immutable(
      headerNames,
      rows,
      progressedPercentage,
      status,
      footerSummary,
      startTime
    )

  def unapply(_item: TProgressUpdateResp): _root_.scala.Option[_root_.scala.Tuple6[_root_.scala.collection.Seq[String], _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]], Double, org.apache.hive.service.rpc.thrift.TJobExecutionStatus, String, Long]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readHeaderNamesValue(_iprot: TProtocol): _root_.scala.collection.Seq[String] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new _root_.scala.collection.mutable.ArrayBuffer[String](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          _iprot.readString()
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeHeaderNamesField(headerNames_item: _root_.scala.collection.Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(HeaderNamesField)
    writeHeaderNamesValue(headerNames_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeHeaderNamesValue(headerNames_item: _root_.scala.collection.Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRING, headerNames_item.size))
    headerNames_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = headerNames_item.size
        while (_i < _size) {
          val headerNames_item_element = headerNames_item(_i)
          _oprot.writeString(headerNames_item_element)
          _i += 1
        }
      case _ =>
        headerNames_item.foreach { headerNames_item_element =>
          _oprot.writeString(headerNames_item_element)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[thrift] def readRowsValue(_iprot: TProtocol): _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new _root_.scala.collection.mutable.ArrayBuffer[_root_.scala.collection.Seq[String]](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          val _list = _iprot.readListBegin()
          if (_list.size == 0) {
            _iprot.readListEnd()
            Nil
          } else {
            val _rv = new _root_.scala.collection.mutable.ArrayBuffer[String](_list.size)
            var _i = 0
            while (_i < _list.size) {
              _rv += {
                _iprot.readString()
              }
              _i += 1
            }
            _iprot.readListEnd()
            _rv
          }
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeRowsField(rows_item: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(RowsField)
    writeRowsValue(rows_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeRowsValue(rows_item: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.LIST, rows_item.size))
    rows_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = rows_item.size
        while (_i < _size) {
          val rows_item_element = rows_item(_i)
          _oprot.writeListBegin(new TList(TType.STRING, rows_item_element.size))
          rows_item_element match {
            case _: IndexedSeq[_] =>
              var _i = 0
              val _size = rows_item_element.size
              while (_i < _size) {
                val rows_item_element_element = rows_item_element(_i)
                _oprot.writeString(rows_item_element_element)
                _i += 1
              }
            case _ =>
              rows_item_element.foreach { rows_item_element_element =>
                _oprot.writeString(rows_item_element_element)
              }
          }
          _oprot.writeListEnd()
          _i += 1
        }
      case _ =>
        rows_item.foreach { rows_item_element =>
          _oprot.writeListBegin(new TList(TType.STRING, rows_item_element.size))
          rows_item_element match {
            case _: IndexedSeq[_] =>
              var _i = 0
              val _size = rows_item_element.size
              while (_i < _size) {
                val rows_item_element_element = rows_item_element(_i)
                _oprot.writeString(rows_item_element_element)
                _i += 1
              }
            case _ =>
              rows_item_element.foreach { rows_item_element_element =>
                _oprot.writeString(rows_item_element_element)
              }
          }
          _oprot.writeListEnd()
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[thrift] def readProgressedPercentageValue(_iprot: TProtocol): Double = {
    _iprot.readDouble()
  }

  @inline private def writeProgressedPercentageField(progressedPercentage_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ProgressedPercentageField)
    writeProgressedPercentageValue(progressedPercentage_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeProgressedPercentageValue(progressedPercentage_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeDouble(progressedPercentage_item)
  }

  @inline private[thrift] def readStatusValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TJobExecutionStatus = {
    org.apache.hive.service.rpc.thrift.TJobExecutionStatus.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeStatusField(status_item: org.apache.hive.service.rpc.thrift.TJobExecutionStatus, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(StatusFieldI32)
    writeStatusValue(status_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeStatusValue(status_item: org.apache.hive.service.rpc.thrift.TJobExecutionStatus, _oprot: TProtocol): Unit = {
    _oprot.writeI32(status_item.value)
  }

  @inline private[thrift] def readFooterSummaryValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeFooterSummaryField(footerSummary_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FooterSummaryField)
    writeFooterSummaryValue(footerSummary_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFooterSummaryValue(footerSummary_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(footerSummary_item)
  }

  @inline private[thrift] def readStartTimeValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeStartTimeField(startTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(StartTimeField)
    writeStartTimeValue(startTime_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeStartTimeValue(startTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(startTime_item)
  }


  object Immutable extends ThriftStructCodec3[TProgressUpdateResp] {
    override def encode(_item: TProgressUpdateResp, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TProgressUpdateResp = TProgressUpdateResp.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TProgressUpdateResp] = TProgressUpdateResp.metaData
  }

  /**
   * The default read-only implementation of TProgressUpdateResp.  You typically should not need to
   * directly reference this class; instead, use the TProgressUpdateResp.apply method to construct
   * new instances.
   */
  class Immutable(
      val headerNames: _root_.scala.collection.Seq[String],
      val rows: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]],
      val progressedPercentage: Double,
      val status: org.apache.hive.service.rpc.thrift.TJobExecutionStatus,
      val footerSummary: String,
      val startTime: Long,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TProgressUpdateResp {
    def this(
      headerNames: _root_.scala.collection.Seq[String] = _root_.scala.collection.immutable.Nil,
      rows: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]] = _root_.scala.collection.immutable.Nil,
      progressedPercentage: Double,
      status: org.apache.hive.service.rpc.thrift.TJobExecutionStatus,
      footerSummary: String,
      startTime: Long
    ) = this(
      headerNames,
      rows,
      progressedPercentage,
      status,
      footerSummary,
      startTime,
      immutable$Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val headerNames: _root_.scala.collection.Seq[String],
      val rows: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]],
      val progressedPercentage: Double,
      val status: org.apache.hive.service.rpc.thrift.TJobExecutionStatus,
      footerSummaryOffset: Int,
      val startTime: Long,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TProgressUpdateResp {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val footerSummary: String =
      if (footerSummaryOffset == -1)
        null
      else {
        _proto.decodeString(_buf, footerSummaryOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TProgressUpdateResp trait with additional state or
   * behavior and implement the read-only methods from TProgressUpdateResp using an underlying
   * instance.
   */
  trait Proxy extends TProgressUpdateResp {
    protected def _underlying_TProgressUpdateResp: TProgressUpdateResp
    override def headerNames: _root_.scala.collection.Seq[String] = _underlying_TProgressUpdateResp.headerNames
    override def rows: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]] = _underlying_TProgressUpdateResp.rows
    override def progressedPercentage: Double = _underlying_TProgressUpdateResp.progressedPercentage
    override def status: org.apache.hive.service.rpc.thrift.TJobExecutionStatus = _underlying_TProgressUpdateResp.status
    override def footerSummary: String = _underlying_TProgressUpdateResp.footerSummary
    override def startTime: Long = _underlying_TProgressUpdateResp.startTime
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TProgressUpdateResp._passthroughFields
  }
}

/**
 * Prefer the companion object's [[org.apache.hive.service.rpc.thrift.TProgressUpdateResp.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TProgressUpdateResp
  extends ThriftStruct
  with _root_.scala.Product6[_root_.scala.collection.Seq[String], _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]], Double, org.apache.hive.service.rpc.thrift.TJobExecutionStatus, String, Long]
  with ValidatingThriftStruct[TProgressUpdateResp]
  with java.io.Serializable
{
  import TProgressUpdateResp._

  def headerNames: _root_.scala.collection.Seq[String]
  def rows: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]]
  def progressedPercentage: Double
  def status: org.apache.hive.service.rpc.thrift.TJobExecutionStatus
  def footerSummary: String
  def startTime: Long

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: _root_.scala.collection.Seq[String] = headerNames
  def _2: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]] = rows
  def _3: Double = progressedPercentage
  def _4: org.apache.hive.service.rpc.thrift.TJobExecutionStatus = status
  def _5: String = footerSummary
  def _6: Long = startTime

  def toTuple: _root_.scala.Tuple6[_root_.scala.collection.Seq[String], _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]], Double, org.apache.hive.service.rpc.thrift.TJobExecutionStatus, String, Long] = {
    (
      headerNames,
      rows,
      progressedPercentage,
      status,
      footerSummary,
      startTime
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (headerNames ne null) {
                writeHeaderNamesValue(headerNames, _oprot)
                _root_.scala.Some(TProgressUpdateResp.HeaderNamesField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (rows ne null) {
                writeRowsValue(rows, _oprot)
                _root_.scala.Some(TProgressUpdateResp.RowsField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeProgressedPercentageValue(progressedPercentage, _oprot)
                _root_.scala.Some(TProgressUpdateResp.ProgressedPercentageField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (status ne null) {
                writeStatusValue(status, _oprot)
                _root_.scala.Some(TProgressUpdateResp.StatusField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (footerSummary ne null) {
                writeFooterSummaryValue(footerSummary, _oprot)
                _root_.scala.Some(TProgressUpdateResp.FooterSummaryField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (true) {
                writeStartTimeValue(startTime, _oprot)
                _root_.scala.Some(TProgressUpdateResp.StartTimeField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TProgressUpdateResp = {
    var headerNames: _root_.scala.collection.Seq[String] = this.headerNames
    var rows: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]] = this.rows
    var progressedPercentage: Double = this.progressedPercentage
    var status: org.apache.hive.service.rpc.thrift.TJobExecutionStatus = this.status
    var footerSummary: String = this.footerSummary
    var startTime: Long = this.startTime
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        headerNames = readHeaderNamesValue(_blob.read)
      case 2 =>
        rows = readRowsValue(_blob.read)
      case 3 =>
        progressedPercentage = readProgressedPercentageValue(_blob.read)
      case 4 =>
        status = readStatusValue(_blob.read)
      case 5 =>
        footerSummary = readFooterSummaryValue(_blob.read)
      case 6 =>
        startTime = readStartTimeValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      headerNames,
      rows,
      progressedPercentage,
      status,
      footerSummary,
      startTime,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TProgressUpdateResp = {
    var headerNames: _root_.scala.collection.Seq[String] = this.headerNames
    var rows: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]] = this.rows
    var progressedPercentage: Double = this.progressedPercentage
    var status: org.apache.hive.service.rpc.thrift.TJobExecutionStatus = this.status
    var footerSummary: String = this.footerSummary
    var startTime: Long = this.startTime

    _fieldId match {
      case 1 =>
        headerNames = _root_.scala.collection.immutable.Nil
      case 2 =>
        rows = _root_.scala.collection.immutable.Nil
      case 3 =>
        progressedPercentage = 0.0
      case 4 =>
        status = null
      case 5 =>
        footerSummary = null
      case 6 =>
        startTime = 0L
      case _ =>
    }
    new Immutable(
      headerNames,
      rows,
      progressedPercentage,
      status,
      footerSummary,
      startTime,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetHeaderNames: TProgressUpdateResp = unsetField(1)

  def unsetRows: TProgressUpdateResp = unsetField(2)

  def unsetProgressedPercentage: TProgressUpdateResp = unsetField(3)

  def unsetStatus: TProgressUpdateResp = unsetField(4)

  def unsetFooterSummary: TProgressUpdateResp = unsetField(5)

  def unsetStartTime: TProgressUpdateResp = unsetField(6)


  override def write(_oprot: TProtocol): Unit = {
    TProgressUpdateResp.validate(this)
    _oprot.writeStructBegin(Struct)
    if (headerNames ne null) writeHeaderNamesField(headerNames, _oprot)
    if (rows ne null) writeRowsField(rows, _oprot)
    writeProgressedPercentageField(progressedPercentage, _oprot)
    if (status ne null) writeStatusField(status, _oprot)
    if (footerSummary ne null) writeFooterSummaryField(footerSummary, _oprot)
    writeStartTimeField(startTime, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    headerNames: _root_.scala.collection.Seq[String] = this.headerNames,
    rows: _root_.scala.collection.Seq[_root_.scala.collection.Seq[String]] = this.rows,
    progressedPercentage: Double = this.progressedPercentage,
    status: org.apache.hive.service.rpc.thrift.TJobExecutionStatus = this.status,
    footerSummary: String = this.footerSummary,
    startTime: Long = this.startTime,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TProgressUpdateResp =
    new Immutable(
      headerNames,
      rows,
      progressedPercentage,
      status,
      footerSummary,
      startTime,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TProgressUpdateResp]

  private def _equals(x: TProgressUpdateResp, y: TProgressUpdateResp): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TProgressUpdateResp])

  override def hashCode: Int = {
    _root_.scala.runtime.ScalaRunTime._hashCode(this)
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 6

  override def productElement(n: Int): Any = n match {
    case 0 => this.headerNames
    case 1 => this.rows
    case 2 => this.progressedPercentage
    case 3 => this.status
    case 4 => this.footerSummary
    case 5 => this.startTime
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TProgressUpdateResp"

  def _codec: ValidatingThriftStructCodec3[TProgressUpdateResp] = TProgressUpdateResp

  def newBuilder(): StructBuilder[TProgressUpdateResp] = new TProgressUpdateRespStructBuilder(_root_.scala.Some(this), fieldTypes)
}

private[thrift] class TProgressUpdateRespStructBuilder(instance: _root_.scala.Option[TProgressUpdateResp], fieldTypes: IndexedSeq[ClassTag[_]])
    extends StructBuilder[TProgressUpdateResp](fieldTypes) {

  def build(): TProgressUpdateResp = instance match {
    case _root_.scala.Some(i) =>
      TProgressUpdateResp(
        (if (fieldArray(0) == null) i.headerNames else fieldArray(0)).asInstanceOf[_root_.scala.collection.Seq[String]],
        (if (fieldArray(1) == null) i.rows else fieldArray(1)).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.collection.Seq[String]]],
        (if (fieldArray(2) == null) i.progressedPercentage else fieldArray(2)).asInstanceOf[Double],
        (if (fieldArray(3) == null) i.status else fieldArray(3)).asInstanceOf[org.apache.hive.service.rpc.thrift.TJobExecutionStatus],
        (if (fieldArray(4) == null) i.footerSummary else fieldArray(4)).asInstanceOf[String],
        (if (fieldArray(5) == null) i.startTime else fieldArray(5)).asInstanceOf[Long]
      )
    case _root_.scala.None =>
      if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("TProgressUpdateResp"))
      else {
        TProgressUpdateResp(
          fieldArray(0).asInstanceOf[_root_.scala.collection.Seq[String]],
          fieldArray(1).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.collection.Seq[String]]],
          fieldArray(2).asInstanceOf[Double],
          fieldArray(3).asInstanceOf[org.apache.hive.service.rpc.thrift.TJobExecutionStatus],
          fieldArray(4).asInstanceOf[String],
          fieldArray(5).asInstanceOf[Long]
        )
      }
    }
}

