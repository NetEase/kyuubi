/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  InvalidFieldsException,
  LazyTProtocol,
  StructBuilder,
  StructBuilderFactory,
  TFieldBlob,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructField,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.reflect.{ClassTag, classTag}


object TExecuteStatementReq extends ValidatingThriftStructCodec3[TExecuteStatementReq] with StructBuilderFactory[TExecuteStatementReq] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TExecuteStatementReq")
  val SessionHandleField: TField = new TField("sessionHandle", TType.STRUCT, 1)
  val SessionHandleFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TSessionHandle] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TSessionHandle]]
  val StatementField: TField = new TField("statement", TType.STRING, 2)
  val StatementFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val ConfOverlayField: TField = new TField("confOverlay", TType.MAP, 3)
  val ConfOverlayFieldManifest: Manifest[_root_.scala.collection.Map[String, String]] = implicitly[Manifest[_root_.scala.collection.Map[String, String]]]
  val RunAsyncField: TField = new TField("runAsync", TType.BOOL, 4)
  val RunAsyncFieldManifest: Manifest[Boolean] = implicitly[Manifest[Boolean]]
  val QueryTimeoutField: TField = new TField("queryTimeout", TType.I64, 5)
  val QueryTimeoutFieldManifest: Manifest[Long] = implicitly[Manifest[Long]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      SessionHandleField,
      false,
      true,
      SessionHandleFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      StatementField,
      false,
      true,
      StatementFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ConfOverlayField,
      true,
      false,
      ConfOverlayFieldManifest,
      _root_.scala.Some(implicitly[Manifest[String]]),
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      RunAsyncField,
      false,
      false,
      RunAsyncFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[Boolean](false)
    ),
    new ThriftStructFieldInfo(
      QueryTimeoutField,
      false,
      false,
      QueryTimeoutFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[Long](0L)
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
    classTag[org.apache.hive.service.rpc.thrift.TSessionHandle].asInstanceOf[ClassTag[_]],
    classTag[String].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[_root_.scala.collection.Map[String, String]]].asInstanceOf[ClassTag[_]],
    classTag[Boolean].asInstanceOf[ClassTag[_]],
    classTag[Long].asInstanceOf[ClassTag[_]]
  )

  private[this] val structFields: Seq[ThriftStructField[TExecuteStatementReq]] = {
    Seq(
      new ThriftStructField[TExecuteStatementReq](
        SessionHandleField,
        _root_.scala.Some(SessionHandleFieldManifest),
        classOf[TExecuteStatementReq]) {
          def getValue[R](struct: TExecuteStatementReq): R = struct.sessionHandle.asInstanceOf[R]
      },
      new ThriftStructField[TExecuteStatementReq](
        StatementField,
        _root_.scala.Some(StatementFieldManifest),
        classOf[TExecuteStatementReq]) {
          def getValue[R](struct: TExecuteStatementReq): R = struct.statement.asInstanceOf[R]
      },
      new ThriftStructField[TExecuteStatementReq](
        ConfOverlayField,
        _root_.scala.Some(ConfOverlayFieldManifest),
        classOf[TExecuteStatementReq]) {
          def getValue[R](struct: TExecuteStatementReq): R = struct.confOverlay.asInstanceOf[R]
      },
      new ThriftStructField[TExecuteStatementReq](
        RunAsyncField,
        _root_.scala.Some(RunAsyncFieldManifest),
        classOf[TExecuteStatementReq]) {
          def getValue[R](struct: TExecuteStatementReq): R = struct.runAsync.asInstanceOf[R]
      },
      new ThriftStructField[TExecuteStatementReq](
        QueryTimeoutField,
        _root_.scala.Some(QueryTimeoutFieldManifest),
        classOf[TExecuteStatementReq]) {
          def getValue[R](struct: TExecuteStatementReq): R = struct.queryTimeout.asInstanceOf[R]
      }
    )
  }

  override lazy val metaData: ThriftStructMetaData[TExecuteStatementReq] =
    new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TExecuteStatementReq): Unit = {
    if (_item.sessionHandle == null) throw new TProtocolException("Required field sessionHandle cannot be null")
    if (_item.statement == null) throw new TProtocolException("Required field statement cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TExecuteStatementReq): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.sessionHandle == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.sessionHandle)
    if (item.statement == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(1))
    buf ++= validateField(item.statement)
    buf ++= validateField(item.confOverlay)
    buf ++= validateField(item.runAsync)
    buf ++= validateField(item.queryTimeout)
    buf.toList
  }

  def withoutPassthroughFields(original: TExecuteStatementReq): TExecuteStatementReq =
    new Immutable(
      sessionHandle =
        {
          val field = original.sessionHandle
          org.apache.hive.service.rpc.thrift.TSessionHandle.withoutPassthroughFields(field)
        },
      statement =
        {
          val field = original.statement
          field
        },
      confOverlay =
        {
          val field = original.confOverlay
          field.map { field =>
            field.map { case (key, value) =>
                val newKey = {
                val field = key
                field
              }
  
  
                val newValue = {
                val field = value
                field
              }
  
  
              newKey -> newValue
            }
          }
        },
      runAsync =
        {
          val field = original.runAsync
          field
        },
      queryTimeout =
        {
          val field = original.queryTimeout
          field
        }
    )

  def newBuilder(): StructBuilder[TExecuteStatementReq] = new TExecuteStatementReqStructBuilder(_root_.scala.None, fieldTypes)

  override def encode(_item: TExecuteStatementReq, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TExecuteStatementReq = {

    var sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle = null
    var _got_sessionHandle = false
    var statementOffset: Int = -1
    var _got_statement = false
    var confOverlay: Option[_root_.scala.collection.Map[String, String]] = None
    var runAsync: Boolean = false
    var queryTimeout: Long = 0L

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                sessionHandle = readSessionHandleValue(_iprot)
                _got_sessionHandle = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'sessionHandle' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                statementOffset = _iprot.offsetSkipString
    
                _got_statement = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'statement' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.MAP =>
    
                confOverlay = Some(readConfOverlayValue(_iprot))
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'confOverlay' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.BOOL =>
    
                runAsync = readRunAsyncValue(_iprot)
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'runAsync' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I64 =>
    
                queryTimeout = readQueryTimeoutValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'queryTimeout' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_sessionHandle) throw new TProtocolException("Required field 'sessionHandle' was not found in serialized data for struct TExecuteStatementReq")
    if (!_got_statement) throw new TProtocolException("Required field 'statement' was not found in serialized data for struct TExecuteStatementReq")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      sessionHandle,
      statementOffset,
      confOverlay,
      runAsync,
      queryTimeout,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TExecuteStatementReq =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TExecuteStatementReq = {
    var sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle = null
    var _got_sessionHandle = false
    var statement: String = null
    var _got_statement = false
    var confOverlay: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = _root_.scala.None
    var runAsync: Boolean = false
    var queryTimeout: Long = 0L
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
                sessionHandle = readSessionHandleValue(_iprot)
                _got_sessionHandle = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'sessionHandle' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                statement = readStatementValue(_iprot)
                _got_statement = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'statement' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.MAP =>
                confOverlay = _root_.scala.Some(readConfOverlayValue(_iprot))
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'confOverlay' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.BOOL =>
                runAsync = readRunAsyncValue(_iprot)
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'runAsync' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I64 =>
                queryTimeout = readQueryTimeoutValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'queryTimeout' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_sessionHandle) throw new TProtocolException("Required field 'sessionHandle' was not found in serialized data for struct TExecuteStatementReq")
    if (!_got_statement) throw new TProtocolException("Required field 'statement' was not found in serialized data for struct TExecuteStatementReq")
    new Immutable(
      sessionHandle,
      statement,
      confOverlay,
      runAsync,
      queryTimeout,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle,
    statement: String,
    confOverlay: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = _root_.scala.None,
    runAsync: Boolean = false,
    queryTimeout: Long = 0L
  ): TExecuteStatementReq =
    new Immutable(
      sessionHandle,
      statement,
      confOverlay,
      runAsync,
      queryTimeout
    )

  def unapply(_item: TExecuteStatementReq): _root_.scala.Option[_root_.scala.Tuple5[org.apache.hive.service.rpc.thrift.TSessionHandle, String, Option[_root_.scala.collection.Map[String, String]], Boolean, Long]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readSessionHandleValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TSessionHandle = {
    org.apache.hive.service.rpc.thrift.TSessionHandle.decode(_iprot)
  }

  @inline private def writeSessionHandleField(sessionHandle_item: org.apache.hive.service.rpc.thrift.TSessionHandle, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SessionHandleField)
    writeSessionHandleValue(sessionHandle_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSessionHandleValue(sessionHandle_item: org.apache.hive.service.rpc.thrift.TSessionHandle, _oprot: TProtocol): Unit = {
    sessionHandle_item.write(_oprot)
  }

  @inline private[thrift] def readStatementValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeStatementField(statement_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(StatementField)
    writeStatementValue(statement_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeStatementValue(statement_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(statement_item)
  }

  @inline private[thrift] def readConfOverlayValue(_iprot: TProtocol): _root_.scala.collection.Map[String, String] = {
    val _map = _iprot.readMapBegin()
    if (_map.size == 0) {
      _iprot.readMapEnd()
      Map.empty[String, String]
    } else {
      val _rv = new _root_.scala.collection.mutable.HashMap[String, String]
      var _i = 0
      while (_i < _map.size) {
        val _key = {
          _iprot.readString()
        }
        val _value = {
          _iprot.readString()
        }
        _rv(_key) = _value
        _i += 1
      }
      _iprot.readMapEnd()
      _rv
    }
  }

  @inline private def writeConfOverlayField(confOverlay_item: _root_.scala.collection.Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ConfOverlayField)
    writeConfOverlayValue(confOverlay_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeConfOverlayValue(confOverlay_item: _root_.scala.collection.Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, confOverlay_item.size))
    confOverlay_item.foreach { case (confOverlay_item_key, confOverlay_item_value) =>
      _oprot.writeString(confOverlay_item_key)
      _oprot.writeString(confOverlay_item_value)
    }
    _oprot.writeMapEnd()
  }

  @inline private[thrift] def readRunAsyncValue(_iprot: TProtocol): Boolean = {
    _iprot.readBool()
  }

  @inline private def writeRunAsyncField(runAsync_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(RunAsyncField)
    writeRunAsyncValue(runAsync_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeRunAsyncValue(runAsync_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeBool(runAsync_item)
  }

  @inline private[thrift] def readQueryTimeoutValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeQueryTimeoutField(queryTimeout_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(QueryTimeoutField)
    writeQueryTimeoutValue(queryTimeout_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeQueryTimeoutValue(queryTimeout_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(queryTimeout_item)
  }


  object Immutable extends ThriftStructCodec3[TExecuteStatementReq] {
    override def encode(_item: TExecuteStatementReq, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TExecuteStatementReq = TExecuteStatementReq.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TExecuteStatementReq] = TExecuteStatementReq.metaData
  }

  /**
   * The default read-only implementation of TExecuteStatementReq.  You typically should not need to
   * directly reference this class; instead, use the TExecuteStatementReq.apply method to construct
   * new instances.
   */
  class Immutable(
      val sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle,
      val statement: String,
      val confOverlay: _root_.scala.Option[_root_.scala.collection.Map[String, String]],
      val runAsync: Boolean,
      val queryTimeout: Long,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TExecuteStatementReq {
    def this(
      sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle,
      statement: String,
      confOverlay: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = _root_.scala.None,
      runAsync: Boolean = false,
      queryTimeout: Long = 0L
    ) = this(
      sessionHandle,
      statement,
      confOverlay,
      runAsync,
      queryTimeout,
      immutable$Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle,
      statementOffset: Int,
      val confOverlay: _root_.scala.Option[_root_.scala.collection.Map[String, String]],
      val runAsync: Boolean,
      val queryTimeout: Long,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TExecuteStatementReq {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val statement: String =
      if (statementOffset == -1)
        null
      else {
        _proto.decodeString(_buf, statementOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TExecuteStatementReq trait with additional state or
   * behavior and implement the read-only methods from TExecuteStatementReq using an underlying
   * instance.
   */
  trait Proxy extends TExecuteStatementReq {
    protected def _underlying_TExecuteStatementReq: TExecuteStatementReq
    override def sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle = _underlying_TExecuteStatementReq.sessionHandle
    override def statement: String = _underlying_TExecuteStatementReq.statement
    override def confOverlay: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = _underlying_TExecuteStatementReq.confOverlay
    override def runAsync: Boolean = _underlying_TExecuteStatementReq.runAsync
    override def queryTimeout: Long = _underlying_TExecuteStatementReq.queryTimeout
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TExecuteStatementReq._passthroughFields
  }
}

/**
 * Prefer the companion object's [[org.apache.hive.service.rpc.thrift.TExecuteStatementReq.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TExecuteStatementReq
  extends ThriftStruct
  with _root_.scala.Product5[org.apache.hive.service.rpc.thrift.TSessionHandle, String, Option[_root_.scala.collection.Map[String, String]], Boolean, Long]
  with ValidatingThriftStruct[TExecuteStatementReq]
  with java.io.Serializable
{
  import TExecuteStatementReq._

  def sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle
  def statement: String
  def confOverlay: _root_.scala.Option[_root_.scala.collection.Map[String, String]]
  def runAsync: Boolean
  def queryTimeout: Long

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: org.apache.hive.service.rpc.thrift.TSessionHandle = sessionHandle
  def _2: String = statement
  def _3: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = confOverlay
  def _4: Boolean = runAsync
  def _5: Long = queryTimeout

  def toTuple: _root_.scala.Tuple5[org.apache.hive.service.rpc.thrift.TSessionHandle, String, Option[_root_.scala.collection.Map[String, String]], Boolean, Long] = {
    (
      sessionHandle,
      statement,
      confOverlay,
      runAsync,
      queryTimeout
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (sessionHandle ne null) {
                writeSessionHandleValue(sessionHandle, _oprot)
                _root_.scala.Some(TExecuteStatementReq.SessionHandleField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (statement ne null) {
                writeStatementValue(statement, _oprot)
                _root_.scala.Some(TExecuteStatementReq.StatementField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (confOverlay.isDefined) {
                writeConfOverlayValue(confOverlay.get, _oprot)
                _root_.scala.Some(TExecuteStatementReq.ConfOverlayField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (true) {
                writeRunAsyncValue(runAsync, _oprot)
                _root_.scala.Some(TExecuteStatementReq.RunAsyncField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (true) {
                writeQueryTimeoutValue(queryTimeout, _oprot)
                _root_.scala.Some(TExecuteStatementReq.QueryTimeoutField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TExecuteStatementReq = {
    var sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle = this.sessionHandle
    var statement: String = this.statement
    var confOverlay: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = this.confOverlay
    var runAsync: Boolean = this.runAsync
    var queryTimeout: Long = this.queryTimeout
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        sessionHandle = readSessionHandleValue(_blob.read)
      case 2 =>
        statement = readStatementValue(_blob.read)
      case 3 =>
        confOverlay = _root_.scala.Some(readConfOverlayValue(_blob.read))
      case 4 =>
        runAsync = readRunAsyncValue(_blob.read)
      case 5 =>
        queryTimeout = readQueryTimeoutValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      sessionHandle,
      statement,
      confOverlay,
      runAsync,
      queryTimeout,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TExecuteStatementReq = {
    var sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle = this.sessionHandle
    var statement: String = this.statement
    var confOverlay: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = this.confOverlay
    var runAsync: Boolean = this.runAsync
    var queryTimeout: Long = this.queryTimeout

    _fieldId match {
      case 1 =>
        sessionHandle = null
      case 2 =>
        statement = null
      case 3 =>
        confOverlay = _root_.scala.None
      case 4 =>
        runAsync = false
      case 5 =>
        queryTimeout = 0L
      case _ =>
    }
    new Immutable(
      sessionHandle,
      statement,
      confOverlay,
      runAsync,
      queryTimeout,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetSessionHandle: TExecuteStatementReq = unsetField(1)

  def unsetStatement: TExecuteStatementReq = unsetField(2)

  def unsetConfOverlay: TExecuteStatementReq = unsetField(3)

  def unsetRunAsync: TExecuteStatementReq = unsetField(4)

  def unsetQueryTimeout: TExecuteStatementReq = unsetField(5)


  override def write(_oprot: TProtocol): Unit = {
    TExecuteStatementReq.validate(this)
    _oprot.writeStructBegin(Struct)
    if (sessionHandle ne null) writeSessionHandleField(sessionHandle, _oprot)
    if (statement ne null) writeStatementField(statement, _oprot)
    if (confOverlay.isDefined) writeConfOverlayField(confOverlay.get, _oprot)
    writeRunAsyncField(runAsync, _oprot)
    writeQueryTimeoutField(queryTimeout, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle = this.sessionHandle,
    statement: String = this.statement,
    confOverlay: _root_.scala.Option[_root_.scala.collection.Map[String, String]] = this.confOverlay,
    runAsync: Boolean = this.runAsync,
    queryTimeout: Long = this.queryTimeout,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TExecuteStatementReq =
    new Immutable(
      sessionHandle,
      statement,
      confOverlay,
      runAsync,
      queryTimeout,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TExecuteStatementReq]

  private def _equals(x: TExecuteStatementReq, y: TExecuteStatementReq): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TExecuteStatementReq])

  override def hashCode: Int = {
    _root_.scala.runtime.ScalaRunTime._hashCode(this)
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 5

  override def productElement(n: Int): Any = n match {
    case 0 => this.sessionHandle
    case 1 => this.statement
    case 2 => this.confOverlay
    case 3 => this.runAsync
    case 4 => this.queryTimeout
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TExecuteStatementReq"

  def _codec: ValidatingThriftStructCodec3[TExecuteStatementReq] = TExecuteStatementReq

  def newBuilder(): StructBuilder[TExecuteStatementReq] = new TExecuteStatementReqStructBuilder(_root_.scala.Some(this), fieldTypes)
}

private[thrift] class TExecuteStatementReqStructBuilder(instance: _root_.scala.Option[TExecuteStatementReq], fieldTypes: IndexedSeq[ClassTag[_]])
    extends StructBuilder[TExecuteStatementReq](fieldTypes) {

  def build(): TExecuteStatementReq = instance match {
    case _root_.scala.Some(i) =>
      TExecuteStatementReq(
        (if (fieldArray(0) == null) i.sessionHandle else fieldArray(0)).asInstanceOf[org.apache.hive.service.rpc.thrift.TSessionHandle],
        (if (fieldArray(1) == null) i.statement else fieldArray(1)).asInstanceOf[String],
        (if (fieldArray(2) == null) i.confOverlay else fieldArray(2)).asInstanceOf[_root_.scala.Option[_root_.scala.collection.Map[String, String]]],
        (if (fieldArray(3) == null) i.runAsync else fieldArray(3)).asInstanceOf[Boolean],
        (if (fieldArray(4) == null) i.queryTimeout else fieldArray(4)).asInstanceOf[Long]
      )
    case _root_.scala.None =>
      if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("TExecuteStatementReq"))
      else {
        TExecuteStatementReq(
          fieldArray(0).asInstanceOf[org.apache.hive.service.rpc.thrift.TSessionHandle],
          fieldArray(1).asInstanceOf[String],
          fieldArray(2).asInstanceOf[_root_.scala.Option[_root_.scala.collection.Map[String, String]]],
          fieldArray(3).asInstanceOf[Boolean],
          fieldArray(4).asInstanceOf[Long]
        )
      }
    }
}

