/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  InvalidFieldsException,
  LazyTProtocol,
  StructBuilder,
  StructBuilderFactory,
  TFieldBlob,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructField,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.reflect.{ClassTag, classTag}


object TGetCrossReferenceReq extends ValidatingThriftStructCodec3[TGetCrossReferenceReq] with StructBuilderFactory[TGetCrossReferenceReq] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TGetCrossReferenceReq")
  val SessionHandleField: TField = new TField("sessionHandle", TType.STRUCT, 1)
  val SessionHandleFieldManifest: Manifest[org.apache.hive.service.rpc.thrift.TSessionHandle] = implicitly[Manifest[org.apache.hive.service.rpc.thrift.TSessionHandle]]
  val ParentCatalogNameField: TField = new TField("parentCatalogName", TType.STRING, 2)
  val ParentCatalogNameFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val ParentSchemaNameField: TField = new TField("parentSchemaName", TType.STRING, 3)
  val ParentSchemaNameFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val ParentTableNameField: TField = new TField("parentTableName", TType.STRING, 4)
  val ParentTableNameFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val ForeignCatalogNameField: TField = new TField("foreignCatalogName", TType.STRING, 5)
  val ForeignCatalogNameFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val ForeignSchemaNameField: TField = new TField("foreignSchemaName", TType.STRING, 6)
  val ForeignSchemaNameFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val ForeignTableNameField: TField = new TField("foreignTableName", TType.STRING, 7)
  val ForeignTableNameFieldManifest: Manifest[String] = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      SessionHandleField,
      false,
      true,
      SessionHandleFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ParentCatalogNameField,
      true,
      false,
      ParentCatalogNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ParentSchemaNameField,
      true,
      false,
      ParentSchemaNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ParentTableNameField,
      true,
      false,
      ParentTableNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ForeignCatalogNameField,
      true,
      false,
      ForeignCatalogNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ForeignSchemaNameField,
      true,
      false,
      ForeignSchemaNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ForeignTableNameField,
      true,
      false,
      ForeignTableNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
    classTag[org.apache.hive.service.rpc.thrift.TSessionHandle].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]],
    classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]]
  )

  private[this] val structFields: Seq[ThriftStructField[TGetCrossReferenceReq]] = {
    Seq(
      new ThriftStructField[TGetCrossReferenceReq](
        SessionHandleField,
        _root_.scala.Some(SessionHandleFieldManifest),
        classOf[TGetCrossReferenceReq]) {
          def getValue[R](struct: TGetCrossReferenceReq): R = struct.sessionHandle.asInstanceOf[R]
      },
      new ThriftStructField[TGetCrossReferenceReq](
        ParentCatalogNameField,
        _root_.scala.Some(ParentCatalogNameFieldManifest),
        classOf[TGetCrossReferenceReq]) {
          def getValue[R](struct: TGetCrossReferenceReq): R = struct.parentCatalogName.asInstanceOf[R]
      },
      new ThriftStructField[TGetCrossReferenceReq](
        ParentSchemaNameField,
        _root_.scala.Some(ParentSchemaNameFieldManifest),
        classOf[TGetCrossReferenceReq]) {
          def getValue[R](struct: TGetCrossReferenceReq): R = struct.parentSchemaName.asInstanceOf[R]
      },
      new ThriftStructField[TGetCrossReferenceReq](
        ParentTableNameField,
        _root_.scala.Some(ParentTableNameFieldManifest),
        classOf[TGetCrossReferenceReq]) {
          def getValue[R](struct: TGetCrossReferenceReq): R = struct.parentTableName.asInstanceOf[R]
      },
      new ThriftStructField[TGetCrossReferenceReq](
        ForeignCatalogNameField,
        _root_.scala.Some(ForeignCatalogNameFieldManifest),
        classOf[TGetCrossReferenceReq]) {
          def getValue[R](struct: TGetCrossReferenceReq): R = struct.foreignCatalogName.asInstanceOf[R]
      },
      new ThriftStructField[TGetCrossReferenceReq](
        ForeignSchemaNameField,
        _root_.scala.Some(ForeignSchemaNameFieldManifest),
        classOf[TGetCrossReferenceReq]) {
          def getValue[R](struct: TGetCrossReferenceReq): R = struct.foreignSchemaName.asInstanceOf[R]
      },
      new ThriftStructField[TGetCrossReferenceReq](
        ForeignTableNameField,
        _root_.scala.Some(ForeignTableNameFieldManifest),
        classOf[TGetCrossReferenceReq]) {
          def getValue[R](struct: TGetCrossReferenceReq): R = struct.foreignTableName.asInstanceOf[R]
      }
    )
  }

  override lazy val metaData: ThriftStructMetaData[TGetCrossReferenceReq] =
    new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TGetCrossReferenceReq): Unit = {
    if (_item.sessionHandle == null) throw new TProtocolException("Required field sessionHandle cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TGetCrossReferenceReq): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.sessionHandle == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.sessionHandle)
    buf ++= validateField(item.parentCatalogName)
    buf ++= validateField(item.parentSchemaName)
    buf ++= validateField(item.parentTableName)
    buf ++= validateField(item.foreignCatalogName)
    buf ++= validateField(item.foreignSchemaName)
    buf ++= validateField(item.foreignTableName)
    buf.toList
  }

  def withoutPassthroughFields(original: TGetCrossReferenceReq): TGetCrossReferenceReq =
    new Immutable(
      sessionHandle =
        {
          val field = original.sessionHandle
          org.apache.hive.service.rpc.thrift.TSessionHandle.withoutPassthroughFields(field)
        },
      parentCatalogName =
        {
          val field = original.parentCatalogName
          field.map { field =>
            field
          }
        },
      parentSchemaName =
        {
          val field = original.parentSchemaName
          field.map { field =>
            field
          }
        },
      parentTableName =
        {
          val field = original.parentTableName
          field.map { field =>
            field
          }
        },
      foreignCatalogName =
        {
          val field = original.foreignCatalogName
          field.map { field =>
            field
          }
        },
      foreignSchemaName =
        {
          val field = original.foreignSchemaName
          field.map { field =>
            field
          }
        },
      foreignTableName =
        {
          val field = original.foreignTableName
          field.map { field =>
            field
          }
        }
    )

  def newBuilder(): StructBuilder[TGetCrossReferenceReq] = new TGetCrossReferenceReqStructBuilder(_root_.scala.None, fieldTypes)

  override def encode(_item: TGetCrossReferenceReq, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TGetCrossReferenceReq = {

    var sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle = null
    var _got_sessionHandle = false
    var parentCatalogNameOffset: Int = -1
    var parentSchemaNameOffset: Int = -1
    var parentTableNameOffset: Int = -1
    var foreignCatalogNameOffset: Int = -1
    var foreignSchemaNameOffset: Int = -1
    var foreignTableNameOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                sessionHandle = readSessionHandleValue(_iprot)
                _got_sessionHandle = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'sessionHandle' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                parentCatalogNameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'parentCatalogName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                parentSchemaNameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'parentSchemaName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                parentTableNameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'parentTableName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                foreignCatalogNameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'foreignCatalogName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                foreignSchemaNameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'foreignSchemaName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                foreignTableNameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'foreignTableName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_sessionHandle) throw new TProtocolException("Required field 'sessionHandle' was not found in serialized data for struct TGetCrossReferenceReq")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      sessionHandle,
      parentCatalogNameOffset,
      parentSchemaNameOffset,
      parentTableNameOffset,
      foreignCatalogNameOffset,
      foreignSchemaNameOffset,
      foreignTableNameOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TGetCrossReferenceReq =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TGetCrossReferenceReq = {
    var sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle = null
    var _got_sessionHandle = false
    var parentCatalogName: _root_.scala.Option[String] = _root_.scala.None
    var parentSchemaName: _root_.scala.Option[String] = _root_.scala.None
    var parentTableName: _root_.scala.Option[String] = _root_.scala.None
    var foreignCatalogName: _root_.scala.Option[String] = _root_.scala.None
    var foreignSchemaName: _root_.scala.Option[String] = _root_.scala.None
    var foreignTableName: _root_.scala.Option[String] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
                sessionHandle = readSessionHandleValue(_iprot)
                _got_sessionHandle = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'sessionHandle' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                parentCatalogName = _root_.scala.Some(readParentCatalogNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'parentCatalogName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                parentSchemaName = _root_.scala.Some(readParentSchemaNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'parentSchemaName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                parentTableName = _root_.scala.Some(readParentTableNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'parentTableName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                foreignCatalogName = _root_.scala.Some(readForeignCatalogNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'foreignCatalogName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                foreignSchemaName = _root_.scala.Some(readForeignSchemaNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'foreignSchemaName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                foreignTableName = _root_.scala.Some(readForeignTableNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'foreignTableName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_sessionHandle) throw new TProtocolException("Required field 'sessionHandle' was not found in serialized data for struct TGetCrossReferenceReq")
    new Immutable(
      sessionHandle,
      parentCatalogName,
      parentSchemaName,
      parentTableName,
      foreignCatalogName,
      foreignSchemaName,
      foreignTableName,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle,
    parentCatalogName: _root_.scala.Option[String] = _root_.scala.None,
    parentSchemaName: _root_.scala.Option[String] = _root_.scala.None,
    parentTableName: _root_.scala.Option[String] = _root_.scala.None,
    foreignCatalogName: _root_.scala.Option[String] = _root_.scala.None,
    foreignSchemaName: _root_.scala.Option[String] = _root_.scala.None,
    foreignTableName: _root_.scala.Option[String] = _root_.scala.None
  ): TGetCrossReferenceReq =
    new Immutable(
      sessionHandle,
      parentCatalogName,
      parentSchemaName,
      parentTableName,
      foreignCatalogName,
      foreignSchemaName,
      foreignTableName
    )

  def unapply(_item: TGetCrossReferenceReq): _root_.scala.Option[_root_.scala.Tuple7[org.apache.hive.service.rpc.thrift.TSessionHandle, Option[String], Option[String], Option[String], Option[String], Option[String], Option[String]]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readSessionHandleValue(_iprot: TProtocol): org.apache.hive.service.rpc.thrift.TSessionHandle = {
    org.apache.hive.service.rpc.thrift.TSessionHandle.decode(_iprot)
  }

  @inline private def writeSessionHandleField(sessionHandle_item: org.apache.hive.service.rpc.thrift.TSessionHandle, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SessionHandleField)
    writeSessionHandleValue(sessionHandle_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSessionHandleValue(sessionHandle_item: org.apache.hive.service.rpc.thrift.TSessionHandle, _oprot: TProtocol): Unit = {
    sessionHandle_item.write(_oprot)
  }

  @inline private[thrift] def readParentCatalogNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeParentCatalogNameField(parentCatalogName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ParentCatalogNameField)
    writeParentCatalogNameValue(parentCatalogName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeParentCatalogNameValue(parentCatalogName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(parentCatalogName_item)
  }

  @inline private[thrift] def readParentSchemaNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeParentSchemaNameField(parentSchemaName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ParentSchemaNameField)
    writeParentSchemaNameValue(parentSchemaName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeParentSchemaNameValue(parentSchemaName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(parentSchemaName_item)
  }

  @inline private[thrift] def readParentTableNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeParentTableNameField(parentTableName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ParentTableNameField)
    writeParentTableNameValue(parentTableName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeParentTableNameValue(parentTableName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(parentTableName_item)
  }

  @inline private[thrift] def readForeignCatalogNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeForeignCatalogNameField(foreignCatalogName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ForeignCatalogNameField)
    writeForeignCatalogNameValue(foreignCatalogName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeForeignCatalogNameValue(foreignCatalogName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(foreignCatalogName_item)
  }

  @inline private[thrift] def readForeignSchemaNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeForeignSchemaNameField(foreignSchemaName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ForeignSchemaNameField)
    writeForeignSchemaNameValue(foreignSchemaName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeForeignSchemaNameValue(foreignSchemaName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(foreignSchemaName_item)
  }

  @inline private[thrift] def readForeignTableNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeForeignTableNameField(foreignTableName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ForeignTableNameField)
    writeForeignTableNameValue(foreignTableName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeForeignTableNameValue(foreignTableName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(foreignTableName_item)
  }


  object Immutable extends ThriftStructCodec3[TGetCrossReferenceReq] {
    override def encode(_item: TGetCrossReferenceReq, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TGetCrossReferenceReq = TGetCrossReferenceReq.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TGetCrossReferenceReq] = TGetCrossReferenceReq.metaData
  }

  /**
   * The default read-only implementation of TGetCrossReferenceReq.  You typically should not need to
   * directly reference this class; instead, use the TGetCrossReferenceReq.apply method to construct
   * new instances.
   */
  class Immutable(
      val sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle,
      val parentCatalogName: _root_.scala.Option[String],
      val parentSchemaName: _root_.scala.Option[String],
      val parentTableName: _root_.scala.Option[String],
      val foreignCatalogName: _root_.scala.Option[String],
      val foreignSchemaName: _root_.scala.Option[String],
      val foreignTableName: _root_.scala.Option[String],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TGetCrossReferenceReq {
    def this(
      sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle,
      parentCatalogName: _root_.scala.Option[String] = _root_.scala.None,
      parentSchemaName: _root_.scala.Option[String] = _root_.scala.None,
      parentTableName: _root_.scala.Option[String] = _root_.scala.None,
      foreignCatalogName: _root_.scala.Option[String] = _root_.scala.None,
      foreignSchemaName: _root_.scala.Option[String] = _root_.scala.None,
      foreignTableName: _root_.scala.Option[String] = _root_.scala.None
    ) = this(
      sessionHandle,
      parentCatalogName,
      parentSchemaName,
      parentTableName,
      foreignCatalogName,
      foreignSchemaName,
      foreignTableName,
      immutable$Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle,
      parentCatalogNameOffset: Int,
      parentSchemaNameOffset: Int,
      parentTableNameOffset: Int,
      foreignCatalogNameOffset: Int,
      foreignSchemaNameOffset: Int,
      foreignTableNameOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TGetCrossReferenceReq {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val parentCatalogName: _root_.scala.Option[String] =
      if (parentCatalogNameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, parentCatalogNameOffset))
      }
    lazy val parentSchemaName: _root_.scala.Option[String] =
      if (parentSchemaNameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, parentSchemaNameOffset))
      }
    lazy val parentTableName: _root_.scala.Option[String] =
      if (parentTableNameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, parentTableNameOffset))
      }
    lazy val foreignCatalogName: _root_.scala.Option[String] =
      if (foreignCatalogNameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, foreignCatalogNameOffset))
      }
    lazy val foreignSchemaName: _root_.scala.Option[String] =
      if (foreignSchemaNameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, foreignSchemaNameOffset))
      }
    lazy val foreignTableName: _root_.scala.Option[String] =
      if (foreignTableNameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, foreignTableNameOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TGetCrossReferenceReq trait with additional state or
   * behavior and implement the read-only methods from TGetCrossReferenceReq using an underlying
   * instance.
   */
  trait Proxy extends TGetCrossReferenceReq {
    protected def _underlying_TGetCrossReferenceReq: TGetCrossReferenceReq
    override def sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle = _underlying_TGetCrossReferenceReq.sessionHandle
    override def parentCatalogName: _root_.scala.Option[String] = _underlying_TGetCrossReferenceReq.parentCatalogName
    override def parentSchemaName: _root_.scala.Option[String] = _underlying_TGetCrossReferenceReq.parentSchemaName
    override def parentTableName: _root_.scala.Option[String] = _underlying_TGetCrossReferenceReq.parentTableName
    override def foreignCatalogName: _root_.scala.Option[String] = _underlying_TGetCrossReferenceReq.foreignCatalogName
    override def foreignSchemaName: _root_.scala.Option[String] = _underlying_TGetCrossReferenceReq.foreignSchemaName
    override def foreignTableName: _root_.scala.Option[String] = _underlying_TGetCrossReferenceReq.foreignTableName
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TGetCrossReferenceReq._passthroughFields
  }
}

/**
 * Prefer the companion object's [[org.apache.hive.service.rpc.thrift.TGetCrossReferenceReq.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TGetCrossReferenceReq
  extends ThriftStruct
  with _root_.scala.Product7[org.apache.hive.service.rpc.thrift.TSessionHandle, Option[String], Option[String], Option[String], Option[String], Option[String], Option[String]]
  with ValidatingThriftStruct[TGetCrossReferenceReq]
  with java.io.Serializable
{
  import TGetCrossReferenceReq._

  def sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle
  def parentCatalogName: _root_.scala.Option[String]
  def parentSchemaName: _root_.scala.Option[String]
  def parentTableName: _root_.scala.Option[String]
  def foreignCatalogName: _root_.scala.Option[String]
  def foreignSchemaName: _root_.scala.Option[String]
  def foreignTableName: _root_.scala.Option[String]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: org.apache.hive.service.rpc.thrift.TSessionHandle = sessionHandle
  def _2: _root_.scala.Option[String] = parentCatalogName
  def _3: _root_.scala.Option[String] = parentSchemaName
  def _4: _root_.scala.Option[String] = parentTableName
  def _5: _root_.scala.Option[String] = foreignCatalogName
  def _6: _root_.scala.Option[String] = foreignSchemaName
  def _7: _root_.scala.Option[String] = foreignTableName

  def toTuple: _root_.scala.Tuple7[org.apache.hive.service.rpc.thrift.TSessionHandle, Option[String], Option[String], Option[String], Option[String], Option[String], Option[String]] = {
    (
      sessionHandle,
      parentCatalogName,
      parentSchemaName,
      parentTableName,
      foreignCatalogName,
      foreignSchemaName,
      foreignTableName
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (sessionHandle ne null) {
                writeSessionHandleValue(sessionHandle, _oprot)
                _root_.scala.Some(TGetCrossReferenceReq.SessionHandleField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (parentCatalogName.isDefined) {
                writeParentCatalogNameValue(parentCatalogName.get, _oprot)
                _root_.scala.Some(TGetCrossReferenceReq.ParentCatalogNameField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (parentSchemaName.isDefined) {
                writeParentSchemaNameValue(parentSchemaName.get, _oprot)
                _root_.scala.Some(TGetCrossReferenceReq.ParentSchemaNameField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (parentTableName.isDefined) {
                writeParentTableNameValue(parentTableName.get, _oprot)
                _root_.scala.Some(TGetCrossReferenceReq.ParentTableNameField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (foreignCatalogName.isDefined) {
                writeForeignCatalogNameValue(foreignCatalogName.get, _oprot)
                _root_.scala.Some(TGetCrossReferenceReq.ForeignCatalogNameField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (foreignSchemaName.isDefined) {
                writeForeignSchemaNameValue(foreignSchemaName.get, _oprot)
                _root_.scala.Some(TGetCrossReferenceReq.ForeignSchemaNameField)
              } else {
                _root_.scala.None
              }
            case 7 =>
              if (foreignTableName.isDefined) {
                writeForeignTableNameValue(foreignTableName.get, _oprot)
                _root_.scala.Some(TGetCrossReferenceReq.ForeignTableNameField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TGetCrossReferenceReq = {
    var sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle = this.sessionHandle
    var parentCatalogName: _root_.scala.Option[String] = this.parentCatalogName
    var parentSchemaName: _root_.scala.Option[String] = this.parentSchemaName
    var parentTableName: _root_.scala.Option[String] = this.parentTableName
    var foreignCatalogName: _root_.scala.Option[String] = this.foreignCatalogName
    var foreignSchemaName: _root_.scala.Option[String] = this.foreignSchemaName
    var foreignTableName: _root_.scala.Option[String] = this.foreignTableName
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        sessionHandle = readSessionHandleValue(_blob.read)
      case 2 =>
        parentCatalogName = _root_.scala.Some(readParentCatalogNameValue(_blob.read))
      case 3 =>
        parentSchemaName = _root_.scala.Some(readParentSchemaNameValue(_blob.read))
      case 4 =>
        parentTableName = _root_.scala.Some(readParentTableNameValue(_blob.read))
      case 5 =>
        foreignCatalogName = _root_.scala.Some(readForeignCatalogNameValue(_blob.read))
      case 6 =>
        foreignSchemaName = _root_.scala.Some(readForeignSchemaNameValue(_blob.read))
      case 7 =>
        foreignTableName = _root_.scala.Some(readForeignTableNameValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      sessionHandle,
      parentCatalogName,
      parentSchemaName,
      parentTableName,
      foreignCatalogName,
      foreignSchemaName,
      foreignTableName,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TGetCrossReferenceReq = {
    var sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle = this.sessionHandle
    var parentCatalogName: _root_.scala.Option[String] = this.parentCatalogName
    var parentSchemaName: _root_.scala.Option[String] = this.parentSchemaName
    var parentTableName: _root_.scala.Option[String] = this.parentTableName
    var foreignCatalogName: _root_.scala.Option[String] = this.foreignCatalogName
    var foreignSchemaName: _root_.scala.Option[String] = this.foreignSchemaName
    var foreignTableName: _root_.scala.Option[String] = this.foreignTableName

    _fieldId match {
      case 1 =>
        sessionHandle = null
      case 2 =>
        parentCatalogName = _root_.scala.None
      case 3 =>
        parentSchemaName = _root_.scala.None
      case 4 =>
        parentTableName = _root_.scala.None
      case 5 =>
        foreignCatalogName = _root_.scala.None
      case 6 =>
        foreignSchemaName = _root_.scala.None
      case 7 =>
        foreignTableName = _root_.scala.None
      case _ =>
    }
    new Immutable(
      sessionHandle,
      parentCatalogName,
      parentSchemaName,
      parentTableName,
      foreignCatalogName,
      foreignSchemaName,
      foreignTableName,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetSessionHandle: TGetCrossReferenceReq = unsetField(1)

  def unsetParentCatalogName: TGetCrossReferenceReq = unsetField(2)

  def unsetParentSchemaName: TGetCrossReferenceReq = unsetField(3)

  def unsetParentTableName: TGetCrossReferenceReq = unsetField(4)

  def unsetForeignCatalogName: TGetCrossReferenceReq = unsetField(5)

  def unsetForeignSchemaName: TGetCrossReferenceReq = unsetField(6)

  def unsetForeignTableName: TGetCrossReferenceReq = unsetField(7)


  override def write(_oprot: TProtocol): Unit = {
    TGetCrossReferenceReq.validate(this)
    _oprot.writeStructBegin(Struct)
    if (sessionHandle ne null) writeSessionHandleField(sessionHandle, _oprot)
    if (parentCatalogName.isDefined) writeParentCatalogNameField(parentCatalogName.get, _oprot)
    if (parentSchemaName.isDefined) writeParentSchemaNameField(parentSchemaName.get, _oprot)
    if (parentTableName.isDefined) writeParentTableNameField(parentTableName.get, _oprot)
    if (foreignCatalogName.isDefined) writeForeignCatalogNameField(foreignCatalogName.get, _oprot)
    if (foreignSchemaName.isDefined) writeForeignSchemaNameField(foreignSchemaName.get, _oprot)
    if (foreignTableName.isDefined) writeForeignTableNameField(foreignTableName.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    sessionHandle: org.apache.hive.service.rpc.thrift.TSessionHandle = this.sessionHandle,
    parentCatalogName: _root_.scala.Option[String] = this.parentCatalogName,
    parentSchemaName: _root_.scala.Option[String] = this.parentSchemaName,
    parentTableName: _root_.scala.Option[String] = this.parentTableName,
    foreignCatalogName: _root_.scala.Option[String] = this.foreignCatalogName,
    foreignSchemaName: _root_.scala.Option[String] = this.foreignSchemaName,
    foreignTableName: _root_.scala.Option[String] = this.foreignTableName,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TGetCrossReferenceReq =
    new Immutable(
      sessionHandle,
      parentCatalogName,
      parentSchemaName,
      parentTableName,
      foreignCatalogName,
      foreignSchemaName,
      foreignTableName,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TGetCrossReferenceReq]

  private def _equals(x: TGetCrossReferenceReq, y: TGetCrossReferenceReq): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TGetCrossReferenceReq])

  override def hashCode: Int = {
    _root_.scala.runtime.ScalaRunTime._hashCode(this)
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 7

  override def productElement(n: Int): Any = n match {
    case 0 => this.sessionHandle
    case 1 => this.parentCatalogName
    case 2 => this.parentSchemaName
    case 3 => this.parentTableName
    case 4 => this.foreignCatalogName
    case 5 => this.foreignSchemaName
    case 6 => this.foreignTableName
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TGetCrossReferenceReq"

  def _codec: ValidatingThriftStructCodec3[TGetCrossReferenceReq] = TGetCrossReferenceReq

  def newBuilder(): StructBuilder[TGetCrossReferenceReq] = new TGetCrossReferenceReqStructBuilder(_root_.scala.Some(this), fieldTypes)
}

private[thrift] class TGetCrossReferenceReqStructBuilder(instance: _root_.scala.Option[TGetCrossReferenceReq], fieldTypes: IndexedSeq[ClassTag[_]])
    extends StructBuilder[TGetCrossReferenceReq](fieldTypes) {

  def build(): TGetCrossReferenceReq = instance match {
    case _root_.scala.Some(i) =>
      TGetCrossReferenceReq(
        (if (fieldArray(0) == null) i.sessionHandle else fieldArray(0)).asInstanceOf[org.apache.hive.service.rpc.thrift.TSessionHandle],
        (if (fieldArray(1) == null) i.parentCatalogName else fieldArray(1)).asInstanceOf[_root_.scala.Option[String]],
        (if (fieldArray(2) == null) i.parentSchemaName else fieldArray(2)).asInstanceOf[_root_.scala.Option[String]],
        (if (fieldArray(3) == null) i.parentTableName else fieldArray(3)).asInstanceOf[_root_.scala.Option[String]],
        (if (fieldArray(4) == null) i.foreignCatalogName else fieldArray(4)).asInstanceOf[_root_.scala.Option[String]],
        (if (fieldArray(5) == null) i.foreignSchemaName else fieldArray(5)).asInstanceOf[_root_.scala.Option[String]],
        (if (fieldArray(6) == null) i.foreignTableName else fieldArray(6)).asInstanceOf[_root_.scala.Option[String]]
      )
    case _root_.scala.None =>
      if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("TGetCrossReferenceReq"))
      else {
        TGetCrossReferenceReq(
          fieldArray(0).asInstanceOf[org.apache.hive.service.rpc.thrift.TSessionHandle],
          fieldArray(1).asInstanceOf[_root_.scala.Option[String]],
          fieldArray(2).asInstanceOf[_root_.scala.Option[String]],
          fieldArray(3).asInstanceOf[_root_.scala.Option[String]],
          fieldArray(4).asInstanceOf[_root_.scala.Option[String]],
          fieldArray(5).asInstanceOf[_root_.scala.Option[String]],
          fieldArray(6).asInstanceOf[_root_.scala.Option[String]]
        )
      }
    }
}

