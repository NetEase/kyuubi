/**
 * Generated by Scrooge
 *   version: 19.12.0
 *   rev: dfdb68cf6b9c501dbbe3ae644504bf403ad76bfa
 *   built at: 20191212-171820
 */
package org.apache.hive.service.rpc.thrift

import com.twitter.scrooge.ThriftEnum
import scala.collection.immutable.{Map => immutable$Map}


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object TOperationType extends _root_.com.twitter.scrooge.ThriftEnumObject[TOperationType] {

  val annotations: immutable$Map[String, String] = immutable$Map.empty

  
  case object ExecuteStatement extends org.apache.hive.service.rpc.thrift.TOperationType {
    val value: Int = 0
    val name: String = "ExecuteStatement"
    val originalName: String = "EXECUTE_STATEMENT"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeExecuteStatement = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationType.ExecuteStatement)
  
  case object GetTypeInfo extends org.apache.hive.service.rpc.thrift.TOperationType {
    val value: Int = 1
    val name: String = "GetTypeInfo"
    val originalName: String = "GET_TYPE_INFO"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeGetTypeInfo = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationType.GetTypeInfo)
  
  case object GetCatalogs extends org.apache.hive.service.rpc.thrift.TOperationType {
    val value: Int = 2
    val name: String = "GetCatalogs"
    val originalName: String = "GET_CATALOGS"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeGetCatalogs = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationType.GetCatalogs)
  
  case object GetSchemas extends org.apache.hive.service.rpc.thrift.TOperationType {
    val value: Int = 3
    val name: String = "GetSchemas"
    val originalName: String = "GET_SCHEMAS"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeGetSchemas = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationType.GetSchemas)
  
  case object GetTables extends org.apache.hive.service.rpc.thrift.TOperationType {
    val value: Int = 4
    val name: String = "GetTables"
    val originalName: String = "GET_TABLES"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeGetTables = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationType.GetTables)
  
  case object GetTableTypes extends org.apache.hive.service.rpc.thrift.TOperationType {
    val value: Int = 5
    val name: String = "GetTableTypes"
    val originalName: String = "GET_TABLE_TYPES"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeGetTableTypes = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationType.GetTableTypes)
  
  case object GetColumns extends org.apache.hive.service.rpc.thrift.TOperationType {
    val value: Int = 6
    val name: String = "GetColumns"
    val originalName: String = "GET_COLUMNS"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeGetColumns = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationType.GetColumns)
  
  case object GetFunctions extends org.apache.hive.service.rpc.thrift.TOperationType {
    val value: Int = 7
    val name: String = "GetFunctions"
    val originalName: String = "GET_FUNCTIONS"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeGetFunctions = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationType.GetFunctions)
  
  case object Unknown extends org.apache.hive.service.rpc.thrift.TOperationType {
    val value: Int = 8
    val name: String = "Unknown"
    val originalName: String = "UNKNOWN"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeUnknown = _root_.scala.Some(org.apache.hive.service.rpc.thrift.TOperationType.Unknown)

  case class EnumUnknownTOperationType(value: Int)
    extends org.apache.hive.service.rpc.thrift.TOperationType with _root_.com.twitter.scrooge.EnumItemUnknown
  {
    val name: String = "EnumUnknownTOperationType" + value
    def originalName: String = name
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   */
  def apply(value: Int): org.apache.hive.service.rpc.thrift.TOperationType =
    value match {
      case 0 => org.apache.hive.service.rpc.thrift.TOperationType.ExecuteStatement
      case 1 => org.apache.hive.service.rpc.thrift.TOperationType.GetTypeInfo
      case 2 => org.apache.hive.service.rpc.thrift.TOperationType.GetCatalogs
      case 3 => org.apache.hive.service.rpc.thrift.TOperationType.GetSchemas
      case 4 => org.apache.hive.service.rpc.thrift.TOperationType.GetTables
      case 5 => org.apache.hive.service.rpc.thrift.TOperationType.GetTableTypes
      case 6 => org.apache.hive.service.rpc.thrift.TOperationType.GetColumns
      case 7 => org.apache.hive.service.rpc.thrift.TOperationType.GetFunctions
      case 8 => org.apache.hive.service.rpc.thrift.TOperationType.Unknown
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownTOperationType(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): org.apache.hive.service.rpc.thrift.TOperationType =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownTOperationType(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationType] =
    value match {
      case 0 => _SomeExecuteStatement
      case 1 => _SomeGetTypeInfo
      case 2 => _SomeGetCatalogs
      case 3 => _SomeGetSchemas
      case 4 => _SomeGetTables
      case 5 => _SomeGetTableTypes
      case 6 => _SomeGetColumns
      case 7 => _SomeGetFunctions
      case 8 => _SomeUnknown
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[org.apache.hive.service.rpc.thrift.TOperationType] =
    name.toLowerCase match {
      case "executestatement" => _SomeExecuteStatement
      case "gettypeinfo" => _SomeGetTypeInfo
      case "getcatalogs" => _SomeGetCatalogs
      case "getschemas" => _SomeGetSchemas
      case "gettables" => _SomeGetTables
      case "gettabletypes" => _SomeGetTableTypes
      case "getcolumns" => _SomeGetColumns
      case "getfunctions" => _SomeGetFunctions
      case "unknown" => _SomeUnknown
      case _ => _root_.scala.None
    }

  lazy val list: List[org.apache.hive.service.rpc.thrift.TOperationType] = scala.List[org.apache.hive.service.rpc.thrift.TOperationType](
    org.apache.hive.service.rpc.thrift.TOperationType.ExecuteStatement,
    org.apache.hive.service.rpc.thrift.TOperationType.GetTypeInfo,
    org.apache.hive.service.rpc.thrift.TOperationType.GetCatalogs,
    org.apache.hive.service.rpc.thrift.TOperationType.GetSchemas,
    org.apache.hive.service.rpc.thrift.TOperationType.GetTables,
    org.apache.hive.service.rpc.thrift.TOperationType.GetTableTypes,
    org.apache.hive.service.rpc.thrift.TOperationType.GetColumns,
    org.apache.hive.service.rpc.thrift.TOperationType.GetFunctions,
    org.apache.hive.service.rpc.thrift.TOperationType.Unknown
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait TOperationType extends ThriftEnum with Serializable